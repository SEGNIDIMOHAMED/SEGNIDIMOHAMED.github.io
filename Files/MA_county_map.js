(function (React$1, ReactDOM, d3, topojson) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && ReactDOM.hasOwnProperty('default') ? ReactDOM['default'] : ReactDOM;

  const jsonUrl =
    'https://gist.githubusercontent.com/wenleicao/296b74bc0269758ef1e010e323f0d6e6/raw/Massachusetts_geo.json';

  const useMassGeo = () => {
    const [data, setData] = React$1.useState(null);
    
    console.log(data);

    React$1.useEffect(() => {
          d3.json(jsonUrl).then(topojsonData => {
            const {ma} = topojsonData.objects;
            setData(topojson.feature(topojsonData, ma));
          //setData(topojsonData );
          });
    }, []);
    
    return data;
  };

  //import {feature} from 'topojson';

  const csvUrl =
    'https://gist.githubusercontent.com/wenleicao/296b74bc0269758ef1e010e323f0d6e6/raw/town_county_mapping.csv';

  const useCountyData = () => {
    const [data, setData] = React$1.useState(null);
     const row = d => {
      d.town = d.town;
      //d.lon = +d.lon;
      return d;
      };
     
    console.log(data);

    React$1.useEffect(() => {
          d3.csv(csvUrl, row).then(setData);
       
    }, []);
    
    return data;
  };

  const projection = d3.geoAlbers()
  	.center([0,42.054])
    .rotate([71.400,0])
    .parallels([41,44])
  	.scale(17000);
  const path = d3.geoPath(projection);
  //const path = (topojasonData) => { 
  // const {ma} = topojsonData.objects;
  //geoPath(projection.fitExtent([[20, 20], [940, 480]], ma))};
  const Marks1 = ({MassGeo, CountyData, getCounty, colorScale, hoveredValue}) => (
    
    React.createElement( 'g', { className: "marks" },
    MassGeo.features.map(feature=>(
       
    React.createElement( 'path', { d: path(feature), fill: colorScale(getCounty(feature.properties.TOWN)), 'fill-opacity': hoveredValue ?  (getCounty(feature.properties.TOWN) ===hoveredValue? "1":"0.2"):1 })
  	
      ))
     
    
    )
  );

  const ColorLegend = ({
    colorScale,
    tickSpacing = 40,
    tickSize = 5,
    tickTextOffset = 20, 
    onHover,
    hoveredValue,
    toTitleCase
  }) =>
    colorScale.domain().map((domainValue, i) => (
      React.createElement( 'g', { className: "tick", transform: `translate(0,${i * tickSpacing})`, onMouseEnter: ()=>{onHover(domainValue);}, onMouseOut: () => {
          onHover(null);
        }, opacity: hoveredValue && domainValue !== hoveredValue ? 0.3: 1 },
        React.createElement( 'circle', { fill: colorScale(domainValue), r: tickSize }),
        React.createElement( 'text', { x: tickTextOffset, dy: ".32em" },
          toTitleCase(domainValue)
        )
      )
    ));

  const width = 960;
  const height = 500;

  const App = () => {
    const MassGeo = useMassGeo();
    const CountyData =useCountyData();
    const [hoveredValue, setHoveredValue] = React$1.useState(null);
    //console.log(hoveredValue)

    if (!MassGeo||!CountyData) {
      return React$1__default.createElement( 'pre', null, "Loading..." );
    }
    
    function toTitleCase(str) {
          return str.replace(
              /\w\S*/g,
              function(txt) {
                  return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
              }
          );
      }

   const colorLegendLabel = "MA County";
    const circleRadius = 7;
   //console.log(CountyData);
   // console.log(MassGeo.features[0].properties.TOWN)
    //console.log(MassGeo.features.properties.TOWN)
      const getCounty = town => {
    for(let i = 0; i < CountyData.length; i++){
      if(CountyData[i].town.toUpperCase() === town.toUpperCase()){
        return CountyData[i].county;
      }
    }
  };
    
     const colorValue = d => d.county; 
    const filteredMassGeo = MassGeo.features.filter (d=>hoveredValue===getCounty(d.properties.TOWN));
      const colorScale = d3.scaleOrdinal()
      .domain(CountyData.map(colorValue))
      .range(['red', 'maroon', 'yellow', 'olive', 'lime', 'green', 'aqua', 'teal', 'blue', 'navy', 'fuchsia', 'purple', 'black', 'grey']);
  		
    //console.log (colorScale('Essex'))
    //console.log(CountyData[0])
    

    //console.log(getCounty("Shrewsbury"))
    return (
      React$1__default.createElement( 'svg', { width: width, height: height, viewBox: "400 0 1200 625" },
       
        React$1__default.createElement( 'g', { transform: `translate( ${innerWidth-120}, 60)` },
            React$1__default.createElement( 'text', {
              x: 35, y: -25, className: "axis-label", textAnchor: "middle" },
              colorLegendLabel
            ),
            React$1__default.createElement( ColorLegend, {
              tickSpacing: 22, tickSize: 10, tickTextOffset: 12, tickSize: circleRadius, colorScale: colorScale, onHover: setHoveredValue, hoveredValue: hoveredValue, toTitleCase: toTitleCase })
          ),
          React$1__default.createElement( 'g', null,
           React$1__default.createElement( Marks1, {
            MassGeo: MassGeo, CountyData: CountyData, colorScale: colorScale, getCounty: getCounty, hoveredValue: hoveredValue })
         ) 
     
      )
    );
  };
  const rootElement = document.getElementById('root');
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3, topojson));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
