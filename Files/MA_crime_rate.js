(function (React$1, ReactDOM, d3, topojson) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && ReactDOM.hasOwnProperty('default') ? ReactDOM['default'] : ReactDOM;

  const jsonUrl =
    'https://gist.githubusercontent.com/wenleicao/296b74bc0269758ef1e010e323f0d6e6/raw/b2959163e5412fd22585144eae434adf2bb64c7b/Massachusetts_geo.json';

  const useMassGeo = () => {
    const [data, setData] = React$1.useState(null);
    
    console.log(data);

    React$1.useEffect(() => {
          d3.json(jsonUrl).then(topojsonData => {
            const {ma} = topojsonData.objects;
            setData(topojson.feature(topojsonData, ma));
          //setData(topojsonData );
          });
    }, []);
    
    return data;
  };

  //import {feature} from 'topojson';

  const csvUrl =
    'https://gist.githubusercontent.com/wenleicao/24da06aff2538ba8740e559c7e670257/raw/Massachusetts_crime_geo.csv';

  const useCrimeData = () => {
    const [data, setData] = React$1.useState(null);
     const row = d => {
      d.lat = +d.lat;
      d.lon = +d.lon;
      d.total = +d.total;
      d.crime_rate = +d.crime_rate;
      return d;
      };
     
    console.log(data);

    React$1.useEffect(() => {
          d3.csv(csvUrl, row).then(setData);
       
    }, []);
    
    return data;
  };

  const projection = d3.geoAlbers()
  	.center([0,42.054])
    .rotate([71.727,0])
    .parallels([41,44])
  	.scale(17000);
  const path = d3.geoPath(projection);
  //const path = (topojasonData) => { 
  // const {ma} = topojsonData.objects;
  //geoPath(projection.fitExtent([[20, 20], [940, 480]], ma))};
  const Marks = ({MassGeo, CrimeData,sizeScale, sizeValue, cityname, countyname}) => (
    
    React.createElement( 'g', { className: "marks" },
    MassGeo.features.map(feature=>(

    React.createElement( 'path', { d: path(feature) })
  	)),
      CrimeData.map(d=> {
    const [x,y] = projection([d.lon, d.lat]);
        return React.createElement( 'circle', { cx: x, cy: y, r: sizeScale(sizeValue(d)) },
                 React.createElement( 'title', null, ["City Name: " + cityname(d), "\nCounty Name: " + countyname(d) + "\nCrime rate: " + d3.format(",.2%")(sizeValue(d))] )
                 )
  		})
      
    
    )
  );

  const width = 960;
  const height = 500;

  const App = () => {
    const MassGeo = useMassGeo();
    const CrimeData =useCrimeData();

    if (!MassGeo||!CrimeData) {
      return React$1__default.createElement( 'pre', null, "Loading..." );
    }

      const cityname =d => d.City;
    const countyname =d => d.County;
    const sizeValue = d =>d.crime_rate;
  	const maxRadius= 10;
  	const sizeScale = d3.scaleSqrt()
  	.domain([0, d3.max(CrimeData, sizeValue)])
  	.range([0, maxRadius]);
   
    return (
      React$1__default.createElement( 'svg', { width: width, height: height, , viewBox: "-50 0 1920 1000" },
       
          React$1__default.createElement( Marks, {
            MassGeo: MassGeo, CrimeData: CrimeData, sizeScale: sizeScale, sizeValue: sizeValue, cityname: cityname, countyname: countyname })
       
      )
    );
  };
  const rootElement = document.getElementById('root1');
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3, topojson));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
