(function (React$1, ReactDOM, d3, topojson) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && ReactDOM.hasOwnProperty('default') ? ReactDOM['default'] : ReactDOM;

  const jsonUrl =
    'https://gist.githubusercontent.com/wenleicao/296b74bc0269758ef1e010e323f0d6e6/raw/Massachusetts_geo.json';

  const useMassGeo = () => {
    const [data, setData] = React$1.useState(null);
    
    console.log(data);

    React$1.useEffect(() => {
          d3.json(jsonUrl).then(topojsonData => {
            const {ma} = topojsonData.objects;
            setData(topojson.feature(topojsonData, ma));
          //setData(topojsonData );
          });
    }, []);
    
    return data;
  };

  //import {feature} from 'topojson';

  const csvUrl =
    'https://gist.githubusercontent.com/wenleicao/296b74bc0269758ef1e010e323f0d6e6/raw/town_county_mapping.csv';

  const useCountyData = () => {
    const [data, setData] = React$1.useState(null);
     const row = d => {
      d.town = d.town;
      //d.lon = +d.lon;
      return d;
      };
     
    console.log(data);

    React$1.useEffect(() => {
          d3.csv(csvUrl, row).then(setData);
       
    }, []);
    
    return data;
  };

  const projection = d3.geoAlbers()
  	.center([0,42.054])
    .rotate([71.400,0])
    .parallels([41,44])
  	.scale(17000);
  const path = d3.geoPath(projection);
  //const path = (topojasonData) => { 
  // const {ma} = topojsonData.objects;
  //geoPath(projection.fitExtent([[20, 20], [940, 480]], ma))};
  const Marks1 = ({MassGeo, CountyData, getCounty, colorScale, hoveredValue}) => (
    
    React.createElement( 'g', { className: "marks" },
    MassGeo.features.map(feature=>(
       
    React.createElement( 'path', { d: path(feature), fill: colorScale(getCounty(feature.properties.TOWN)), 'fill-opacity': hoveredValue ?  (getCounty(feature.properties.TOWN) ===hoveredValue? "1":"0.2"):1 })
  	
      ))
     
    
    )
  );

  const ColorLegend = ({
    colorScale,
    tickSpacing = 40,
    tickSize = 5,
    tickTextOffset = 20, 
    onHover,
    hoveredValue,
    toTitleCase
  }) =>
    colorScale.domain().map((domainValue, i) => (
      React.createElement( 'g', { className: "tick", transform: `translate(0,${i * tickSpacing})`, onMouseEnter: ()=>{onHover(domainValue);}, onMouseOut: () => {
          onHover(null);
        }, opacity: hoveredValue && domainValue !== hoveredValue ? 0.3: 1 },
        React.createElement( 'circle', { fill: colorScale(domainValue), r: tickSize }),
        React.createElement( 'text', { x: tickTextOffset, dy: ".32em" },
          toTitleCase(domainValue)
        )
      )
    ));

  const width = 960;
  const height = 500;

  const App = () => {
    const MassGeo = useMassGeo();
    const CountyData =useCountyData();
    const [hoveredValue, setHoveredValue] = React$1.useState(null);
    //console.log(hoveredValue)

    if (!MassGeo||!CountyData) {
      return React$1__default.createElement( 'pre', null, "Loading..." );
    }
    
    function toTitleCase(str) {
          return str.replace(
              /\w\S*/g,
              function(txt) {
                  return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
              }
          );
      }

   const colorLegendLabel = "MA County";
    const circleRadius = 7;
   //console.log(CountyData);
   // console.log(MassGeo.features[0].properties.TOWN)
    //console.log(MassGeo.features.properties.TOWN)
      const getCounty = town => {
    for(let i = 0; i < CountyData.length; i++){
      if(CountyData[i].town.toUpperCase() === town.toUpperCase()){
        return CountyData[i].county;
      }
    }
  };
    
     const colorValue = d => d.county; 
    const filteredMassGeo = MassGeo.features.filter (d=>hoveredValue===getCounty(d.properties.TOWN));
      const colorScale = d3.scaleOrdinal()
      .domain(CountyData.map(colorValue))
      .range(['red', 'maroon', 'yellow', 'olive', 'lime', 'green', 'aqua', 'teal', 'blue', 'navy', 'fuchsia', 'purple', 'black', 'grey']);
  		
    //console.log (colorScale('Essex'))
    //console.log(CountyData[0])
    

    //console.log(getCounty("Shrewsbury"))
    return (
      React$1__default.createElement( 'svg', { width: width, height: height },
       
        React$1__default.createElement( 'g', { transform: `translate( ${innerWidth-120}, 60)` },
            React$1__default.createElement( 'text', {
              x: 35, y: -25, className: "axis-label", textAnchor: "middle" },
              colorLegendLabel
            ),
            React$1__default.createElement( ColorLegend, {
              tickSpacing: 22, tickSize: 10, tickTextOffset: 12, tickSize: circleRadius, colorScale: colorScale, onHover: setHoveredValue, hoveredValue: hoveredValue, toTitleCase: toTitleCase })
          ),
          React$1__default.createElement( 'g', null,
           React$1__default.createElement( Marks1, {
            MassGeo: MassGeo, CountyData: CountyData, colorScale: colorScale, getCounty: getCounty, hoveredValue: hoveredValue })
         ) 
     
      )
    );
  };
  const rootElement = document.getElementById('root');
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3, topojson));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbInVzZU1hc3NHZW8uanMiLCJ1c2VDb3VudHlEYXRhLmpzIiwiTWFya3MxLmpzIiwiQ29sb3JMZWdlbmQuanMiLCJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGpzb24gfSBmcm9tICdkMyc7XG5pbXBvcnQge2ZlYXR1cmV9IGZyb20gJ3RvcG9qc29uJztcblxuY29uc3QganNvblVybCA9XG4gICdodHRwczovL2dpc3QuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3dlbmxlaWNhby8yOTZiNzRiYzAyNjk3NThlZjFlMDEwZTMyM2YwZDZlNi9yYXcvTWFzc2FjaHVzZXR0c19nZW8uanNvbic7XG5cbmV4cG9ydCBjb25zdCB1c2VNYXNzR2VvID0gKCkgPT4ge1xuICBjb25zdCBbZGF0YSwgc2V0RGF0YV0gPSB1c2VTdGF0ZShudWxsKTtcbiAgXG4gIGNvbnNvbGUubG9nKGRhdGEpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGpzb24oanNvblVybCkudGhlbih0b3BvanNvbkRhdGEgPT4ge1xuICAgICAgICAgIGNvbnN0IHttYX0gPSB0b3BvanNvbkRhdGEub2JqZWN0cztcbiAgICAgICAgICBzZXREYXRhKGZlYXR1cmUodG9wb2pzb25EYXRhLCBtYSkpO1xuICAgICAgICAvL3NldERhdGEodG9wb2pzb25EYXRhICk7XG4gICAgICAgIH0pO1xuICB9LCBbXSk7XG4gIFxuICByZXR1cm4gZGF0YTtcbn07XG5cblxuIiwiaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzdiB9IGZyb20gJ2QzJztcbi8vaW1wb3J0IHtmZWF0dXJlfSBmcm9tICd0b3BvanNvbic7XG5cbmNvbnN0IGNzdlVybCA9XG4gICdodHRwczovL2dpc3QuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3dlbmxlaWNhby8yOTZiNzRiYzAyNjk3NThlZjFlMDEwZTMyM2YwZDZlNi9yYXcvdG93bl9jb3VudHlfbWFwcGluZy5jc3YnO1xuXG5leHBvcnQgY29uc3QgdXNlQ291bnR5RGF0YSA9ICgpID0+IHtcbiAgY29uc3QgW2RhdGEsIHNldERhdGFdID0gdXNlU3RhdGUobnVsbCk7XG4gICBjb25zdCByb3cgPSBkID0+IHtcbiAgICBkLnRvd24gPSBkLnRvd247XG4gICAgLy9kLmxvbiA9ICtkLmxvbjtcbiAgICByZXR1cm4gZDtcbiAgICB9O1xuICAgXG4gIGNvbnNvbGUubG9nKGRhdGEpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGNzdihjc3ZVcmwsIHJvdykudGhlbihzZXREYXRhKTtcbiAgICAgXG4gIH0sIFtdKTtcbiAgXG4gIHJldHVybiBkYXRhO1xufTtcbiIsImltcG9ydCB7IGdlb0VxdWFsRWFydGgsIGdlb1BhdGgsIGdlb0NvbmljQ29uZm9ybWFsLCBnZW9PcnRob2dyYXBoaWMsZ2VvQWxiZXJzIH0gZnJvbSAnZDMnO1xuXG5jb25zdCBwcm9qZWN0aW9uID0gZ2VvQWxiZXJzKClcblx0LmNlbnRlcihbMCw0Mi4wNTRdKVxuICAucm90YXRlKFs3MS40MDAsMF0pXG4gIC5wYXJhbGxlbHMoWzQxLDQ0XSlcblx0LnNjYWxlKDE3MDAwKTtcbmNvbnN0IHBhdGggPSBnZW9QYXRoKHByb2plY3Rpb24pO1xuLy9jb25zdCBwYXRoID0gKHRvcG9qYXNvbkRhdGEpID0+IHsgXG4vLyBjb25zdCB7bWF9ID0gdG9wb2pzb25EYXRhLm9iamVjdHM7XG4vL2dlb1BhdGgocHJvamVjdGlvbi5maXRFeHRlbnQoW1syMCwgMjBdLCBbOTQwLCA0ODBdXSwgbWEpKX07XG5leHBvcnQgY29uc3QgTWFya3MxID0gKHtNYXNzR2VvLCBDb3VudHlEYXRhLCBnZXRDb3VudHksIGNvbG9yU2NhbGUsIGhvdmVyZWRWYWx1ZX0pID0+IChcbiAgXG4gIDxnIGNsYXNzTmFtZT1cIm1hcmtzXCI+XG4gIHtNYXNzR2VvLmZlYXR1cmVzLm1hcChmZWF0dXJlPT4oXG4gICAgIFxuICA8cGF0aCBkPXtwYXRoKGZlYXR1cmUpfSBmaWxsPXtjb2xvclNjYWxlKGdldENvdW50eShmZWF0dXJlLnByb3BlcnRpZXMuVE9XTikpfSBcbiAgICBmaWxsLW9wYWNpdHk9e2hvdmVyZWRWYWx1ZSA/ICAoZ2V0Q291bnR5KGZlYXR1cmUucHJvcGVydGllcy5UT1dOKSA9PT1ob3ZlcmVkVmFsdWU/IFwiMVwiOlwiMC4yXCIpOjF9XG4gICBcbiAgICAvPlxuXHRcbiAgICApKX1cbiAgIFxuICBcbiAgPC9nPlxuKTsiLCJleHBvcnQgY29uc3QgQ29sb3JMZWdlbmQgPSAoe1xuICBjb2xvclNjYWxlLFxuICB0aWNrU3BhY2luZyA9IDQwLFxuICB0aWNrU2l6ZSA9IDUsXG4gIHRpY2tUZXh0T2Zmc2V0ID0gMjAsIFxuICBvbkhvdmVyLFxuICBob3ZlcmVkVmFsdWUsXG4gIHRvVGl0bGVDYXNlXG59KSA9PlxuICBjb2xvclNjYWxlLmRvbWFpbigpLm1hcCgoZG9tYWluVmFsdWUsIGkpID0+IChcbiAgICA8ZyBjbGFzc05hbWU9XCJ0aWNrXCIgdHJhbnNmb3JtPXtgdHJhbnNsYXRlKDAsJHtpICogdGlja1NwYWNpbmd9KWB9XG4gICAgICBvbk1vdXNlRW50ZXIgPXsoKT0+e29uSG92ZXIoZG9tYWluVmFsdWUpfX0gIFxuICAgICAgICBvbk1vdXNlT3V0PXsoKSA9PiB7XG4gICAgICAgIG9uSG92ZXIobnVsbCk7XG4gICAgICB9fVxuICAgICAgb3BhY2l0eT17aG92ZXJlZFZhbHVlICYmIGRvbWFpblZhbHVlICE9PSBob3ZlcmVkVmFsdWUgPyAwLjM6IDF9XG4gICAgICA+XG4gICAgICA8Y2lyY2xlIGZpbGw9e2NvbG9yU2NhbGUoZG9tYWluVmFsdWUpfSByPXt0aWNrU2l6ZX0gLz5cbiAgICAgIDx0ZXh0IHg9e3RpY2tUZXh0T2Zmc2V0fSBkeT1cIi4zMmVtXCI+XG4gICAgICAgIHt0b1RpdGxlQ2FzZShkb21haW5WYWx1ZSl9XG4gICAgICA8L3RleHQ+XG4gICAgPC9nPlxuICApKTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHtzY2FsZU9yZGluYWwgIH0gZnJvbSAnZDMnO1xuaW1wb3J0IHsgdXNlTWFzc0dlbyB9IGZyb20gJy4vdXNlTWFzc0dlbyc7XG5pbXBvcnQgeyB1c2VDb3VudHlEYXRhIH0gZnJvbSAnLi91c2VDb3VudHlEYXRhJztcbi8vaW1wb3J0IHsgTWFya3MgfSBmcm9tICcuL01hcmtzJztcbmltcG9ydCB7IE1hcmtzMSB9IGZyb20gJy4vTWFya3MxJztcbmltcG9ydCB7IENvbG9yTGVnZW5kIH0gZnJvbSAnLi9Db2xvckxlZ2VuZCc7XG5cbmNvbnN0IHdpZHRoID0gOTYwO1xuY29uc3QgaGVpZ2h0ID0gNTAwO1xuXG5jb25zdCBBcHAgPSAoKSA9PiB7XG4gIGNvbnN0IE1hc3NHZW8gPSB1c2VNYXNzR2VvKCk7XG4gIGNvbnN0IENvdW50eURhdGEgPXVzZUNvdW50eURhdGEoKTtcbiAgY29uc3QgW2hvdmVyZWRWYWx1ZSwgc2V0SG92ZXJlZFZhbHVlXSA9IHVzZVN0YXRlKG51bGwpO1xuICAvL2NvbnNvbGUubG9nKGhvdmVyZWRWYWx1ZSlcblxuICBpZiAoIU1hc3NHZW98fCFDb3VudHlEYXRhKSB7XG4gICAgcmV0dXJuIDxwcmU+TG9hZGluZy4uLjwvcHJlPjtcbiAgfVxuICBcbiAgZnVuY3Rpb24gdG9UaXRsZUNhc2Uoc3RyKSB7XG4gICAgICAgIHJldHVybiBzdHIucmVwbGFjZShcbiAgICAgICAgICAgIC9cXHdcXFMqL2csXG4gICAgICAgICAgICBmdW5jdGlvbih0eHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHh0LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgdHh0LnN1YnN0cigxKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuIGNvbnN0IGNvbG9yTGVnZW5kTGFiZWwgPSBcIk1BIENvdW50eVwiO1xuICBjb25zdCBjaXJjbGVSYWRpdXMgPSA3O1xuIC8vY29uc29sZS5sb2coQ291bnR5RGF0YSk7XG4gLy8gY29uc29sZS5sb2coTWFzc0dlby5mZWF0dXJlc1swXS5wcm9wZXJ0aWVzLlRPV04pXG4gIC8vY29uc29sZS5sb2coTWFzc0dlby5mZWF0dXJlcy5wcm9wZXJ0aWVzLlRPV04pXG4gICAgY29uc3QgZ2V0Q291bnR5ID0gdG93biA9PiB7XG4gIGZvcihsZXQgaSA9IDA7IGkgPCBDb3VudHlEYXRhLmxlbmd0aDsgaSsrKXtcbiAgICBpZihDb3VudHlEYXRhW2ldLnRvd24udG9VcHBlckNhc2UoKSA9PT0gdG93bi50b1VwcGVyQ2FzZSgpKXtcbiAgICAgIHJldHVybiBDb3VudHlEYXRhW2ldLmNvdW50eTtcbiAgICB9XG4gIH1cbn07XG4gIFxuICAgY29uc3QgY29sb3JWYWx1ZSA9IGQgPT4gZC5jb3VudHk7IFxuICBjb25zdCBmaWx0ZXJlZE1hc3NHZW8gPSBNYXNzR2VvLmZlYXR1cmVzLmZpbHRlciAoZD0+aG92ZXJlZFZhbHVlPT09Z2V0Q291bnR5KGQucHJvcGVydGllcy5UT1dOKSk7XG4gICAgY29uc3QgY29sb3JTY2FsZSA9IHNjYWxlT3JkaW5hbCgpXG4gICAgLmRvbWFpbihDb3VudHlEYXRhLm1hcChjb2xvclZhbHVlKSlcbiAgICAucmFuZ2UoWydyZWQnLCAnbWFyb29uJywgJ3llbGxvdycsICdvbGl2ZScsICdsaW1lJywgJ2dyZWVuJywgJ2FxdWEnLCAndGVhbCcsICdibHVlJywgJ25hdnknLCAnZnVjaHNpYScsICdwdXJwbGUnLCAnYmxhY2snLCAnZ3JleSddKTtcblx0XHRcbiAgLy9jb25zb2xlLmxvZyAoY29sb3JTY2FsZSgnRXNzZXgnKSlcbiAgLy9jb25zb2xlLmxvZyhDb3VudHlEYXRhWzBdKVxuICBcblxuICAvL2NvbnNvbGUubG9nKGdldENvdW50eShcIlNocmV3c2J1cnlcIikpXG4gIHJldHVybiAoXG4gICAgPHN2ZyB3aWR0aD17d2lkdGh9IGhlaWdodD17aGVpZ2h0fT5cbiAgICAgXG4gICAgICA8ZyB0cmFuc2Zvcm09e2B0cmFuc2xhdGUoICR7aW5uZXJXaWR0aC0xMjB9LCA2MClgfT5cbiAgICAgICAgICA8dGV4dFxuICAgICAgICAgICAgeD17MzV9XG4gICAgICAgICAgICB5PXstMjV9XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJheGlzLWxhYmVsXCJcbiAgICAgICAgICAgIHRleHRBbmNob3I9XCJtaWRkbGVcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtjb2xvckxlZ2VuZExhYmVsfVxuICAgICAgICAgIDwvdGV4dD5cbiAgICAgICAgICA8Q29sb3JMZWdlbmRcbiAgICAgICAgICAgIHRpY2tTcGFjaW5nPXsyMn1cbiAgICAgICAgICAgIHRpY2tTaXplPXsxMH1cbiAgICAgICAgICAgIHRpY2tUZXh0T2Zmc2V0PXsxMn1cbiAgICAgICAgICAgIHRpY2tTaXplPXtjaXJjbGVSYWRpdXN9XG4gICAgICAgICAgICBjb2xvclNjYWxlPXtjb2xvclNjYWxlfVxuICAgICAgICAgICAgb25Ib3ZlciA9IHtzZXRIb3ZlcmVkVmFsdWV9XG4gICAgICAgICAgICBob3ZlcmVkVmFsdWU9IHtob3ZlcmVkVmFsdWV9XG4gICAgICAgICAgICB0b1RpdGxlQ2FzZT17dG9UaXRsZUNhc2V9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9nPlxuICAgICAgICA8Zz5cbiAgICAgICAgIDxNYXJrczFcbiAgICAgICAgICBNYXNzR2VvPXtNYXNzR2VvfVxuICAgICAgICAgIENvdW50eURhdGEgPSB7Q291bnR5RGF0YX1cbiAgICAgICAgICBjb2xvclNjYWxlID0ge2NvbG9yU2NhbGV9XG4gICAgICAgICAgZ2V0Q291bnR5ID0ge2dldENvdW50eX1cbiAgICAgICAgICBob3ZlcmVkVmFsdWU9IHtob3ZlcmVkVmFsdWV9XG4gICAgICAgIC8+XG4gICAgICAgPC9nPiBcbiAgIFxuICAgIDwvc3ZnPlxuICApO1xufTtcbmNvbnN0IHJvb3RFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jvb3QnKTtcblJlYWN0RE9NLnJlbmRlcig8QXBwIC8+LCByb290RWxlbWVudCk7XG4iXSwibmFtZXMiOlsidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJqc29uIiwiZmVhdHVyZSIsImNzdiIsImdlb0FsYmVycyIsImdlb1BhdGgiLCJSZWFjdCIsInNjYWxlT3JkaW5hbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0VBSUEsTUFBTSxPQUFPO0lBQ1gsMEdBQTBHLENBQUM7O0FBRTdHLEVBQU8sTUFBTSxVQUFVLEdBQUcsTUFBTTtJQUM5QixNQUFNLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxHQUFHQSxnQkFBUSxDQUFDLElBQUksQ0FBQyxDQUFDOztJQUV2QyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDOztJQUVsQkMsaUJBQVMsQ0FBQyxNQUFNO1VBQ1ZDLE9BQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxJQUFJO1lBQ2pDLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDO1lBQ2xDLE9BQU8sQ0FBQ0MsZ0JBQU8sQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQzs7V0FFcEMsQ0FBQyxDQUFDO0tBQ1IsRUFBRSxFQUFFLENBQUMsQ0FBQzs7SUFFUCxPQUFPLElBQUksQ0FBQztHQUNiLENBQUM7Ozs7RUNqQkYsTUFBTSxNQUFNO0lBQ1YsMkdBQTJHLENBQUM7O0FBRTlHLEVBQU8sTUFBTSxhQUFhLEdBQUcsTUFBTTtJQUNqQyxNQUFNLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxHQUFHSCxnQkFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3RDLE1BQU0sR0FBRyxHQUFHLENBQUMsSUFBSTtNQUNoQixDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7O01BRWhCLE9BQU8sQ0FB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