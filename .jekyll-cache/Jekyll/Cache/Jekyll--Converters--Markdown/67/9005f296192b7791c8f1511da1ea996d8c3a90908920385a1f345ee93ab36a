I".<p>A few weeks ago, some members of my family needed to book appointments on a website concerning their identification. However, they couldn‚Äôt get a spot as all appointments were booked out for the year of 2022.</p>

<p>Regardless, they kept accessing the website from time to time, in hopes that someone would cancel their appointment and they could swoop in. But the odds of finding an appointment randomly were low.</p>

<p>I thought about how this process of checking was manual, repetive and automatable. So I got to work and began figuring out a way to automate this for them.</p>

<p>In this post, I will discuss the approach I took, the tools/technologies I used and the possible downfalls in the hosts website.</p>

<p>Here is the link to the project github repository: <a href="https://github.com/thaneshp/appointment-checker">https://github.com/thaneshp/appointment-checker</a></p>

<h2 id="initial-outlook">Initial Outlook</h2>

<p>To begin, I thought about how a human would navigate the webpage and listed every step.</p>

<p>After attempting to book an appointment several times, I realised that there were fundamentally four steps of navigation:</p>

<ol>
  <li>
    <p>Click and select a preferred location from the 1st drop-down field.</p>
  </li>
  <li>
    <p>Click and select the reason for their appointment from the 2nd field.</p>
  </li>
  <li>
    <p>Click on the date input field for the date selector to appear.</p>
  </li>
  <li>
    <p>Cycle through the calendar, checking for any available dates.</p>
  </li>
</ol>

<p align="left" style="margin-bottom: 3%; margin-top: 1%;">
<img style="box-shadow: 0px 0px 10px 0px rgb(0 0 0 / 50%);" src="../images/appointment-checker/website-interaction-steps.jpg" />
<br /> <i>Figure 1: Appointment Website Layout.</i>
</p>

<p>To translate this into code, I needed to include opening/closing of the browser, appointment checking and alerting of subscribers.</p>

<p align="left" style="margin-bottom: 3%; margin-top: 3%;">
<img style="box-shadow: 0px 0px 10px 0px rgb(0 0 0 / 50%); " src="../images/appointment-checker/flowchart.jpg" />
<br /> <i>Figure 2: Flowchart of Appointment Checking Steps</i>
</p>

<h2 id="implementation">Implementation</h2>

<p>At this stage, I had plan in mind and was ready to get stuck into the code.</p>

<h3 id="interacting-with-html-elements">Interacting with HTML Elements</h3>

<p>From my research, I found out that using Selenium with Python was the best way to go about this. With Selenium, you can go interact with HTML elements in Python through their <code class="language-plaintext highlighter-rouge">id</code>, <code class="language-plaintext highlighter-rouge">tag</code>, <code class="language-plaintext highlighter-rouge">xpath</code> and more.</p>

<p>For example, to select and pre-fill the first two input fields, I used the <code class="language-plaintext highlighter-rouge">id</code> field as shown below.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">location_field</span> <span class="o">=</span> <span class="n">driver</span><span class="p">.</span><span class="n">find_element_by_id</span><span class="p">(</span><span class="n">FIRST_SELECT_ELEMENT_ID</span><span class="p">)</span>
<span class="n">Select</span><span class="p">(</span><span class="n">location_field</span><span class="p">).</span><span class="n">select_by_value</span><span class="p">(</span><span class="n">FIRST_SELECT_ELEMENT_VALUE</span><span class="p">)</span>
</code></pre></div></div>

<p>To aid me with using this library, I downloaded the <a href="https://chrome.google.com/webstore/detail/selectorshub-xpath-plugin/ndgimibanhlabgdgjcpbbndiehljcpfh">SelectorsHub - XPath Plugin</a> on Google Chrome which indicates how to select specific elements using Selenium.</p>

<h3 id="determining-an-available-date">Determining an Available Date</h3>

<p>Now that I had a way of interacting with the HTML elements, I needed to figure out how to search for and determine an available date.</p>

<p>The question I was dealing with was, ‚ÄúWhat makes a date available?‚Äù</p>

<p>From interacting with website, I realised that a date is available when it can be clicked on; but how does that look like in code?</p>

<p>Using the trusty inspect element, I discovered that a date is clickable when it has the <code class="language-plaintext highlighter-rouge">a</code> tag and un-clickable when it has the <code class="language-plaintext highlighter-rouge">span</code> tag. Now that I knew this, it was a matter of looping through all the dates and checking if any were ‚Äòclickable‚Äô. The moment a ‚Äòclickable‚Äô date is found, the date is recorded, the loop broken and a notification sent.</p>

<h3 id="alerting-subscribers">Alerting Subscribers</h3>

<p>Once a date was found, the script needed to inform a person to take action.</p>

<p>Initially, I only added email notification; using the <code class="language-plaintext highlighter-rouge">smtplib</code> module and configured it using one of my personal Gmail accounts. This worked well, however, I noticed that subscribers couldn‚Äôt respond fast enough as they weren‚Äôt likely to check their emails very often.</p>

<p>Due to this, I added SMS notification using Twilio API. Their free-trial was all I needed for this, but it included their default text in every message sent. Regardless, their service is reliable and easy to set up.</p>

<p>Adding SMS increased user response times significantly as people were more likely to see the alert immediately.</p>

<h3 id="automating-script-execution">Automating Script Execution</h3>

<p>Now that the script was ready, I needed a way of running it automatically and continously.</p>

<p>To do this, I used VMware Workstation on my secondary PC to deploy an Ubuntu VM. On this VM, I used <code class="language-plaintext highlighter-rouge">crontab</code> to configure this script to run every minute and log the output to a <code class="language-plaintext highlighter-rouge">.txt</code> file.</p>

<p>At this point, it was time to sit back and wait‚Ä¶</p>

<h2 id="areas-of-improvement">Areas of Improvement</h2>

<p>This script is by no means perfect, but it does the job.</p>

<p>Fundamentally, I think there a few areas that it can be improved upon.</p>

<h3 id="1-efficient-date-checking">1. Efficient Date Checking</h3>

<p>Right now, this script is checking every possible date on the date-picker UI. However, upon looking at their source code, it appears that many dates are permanently disabled, e.g. weekends and public holidays.</p>

<p>As such, parts of the script can be re-written to check dates that could potentially show up as an available option; making it more efficient.</p>

<h3 id="2-find-all-available-dates">2. Find All Available Dates</h3>

<p>Currently, the script will find the first available date, notify the subscibers and stop searching.</p>

<p>However,</p>
:ET