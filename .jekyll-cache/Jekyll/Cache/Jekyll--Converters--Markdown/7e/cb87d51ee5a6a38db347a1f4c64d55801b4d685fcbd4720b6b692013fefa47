I"® <p>Recently, I decided to learn about Docker and how it can be used to minimize the use of our infrastructure‚Äôs capacity. In a nutshell, Docker allows us to make better use of our hardware whilst ensuring our application runs on any OS.</p>

<p>In this tutorial, I will walkthrough step-by-step on how you can get Docker setup on a GCP VM instance so that you can run your own containerized applications.</p>

<p>Before you get started, this tutorial assumes you have some basic GCP knowledge, a Google Cloud account and an existing project already setup.</p>

<h1 id="step-0">Step 0</h1>

<h2 id="log-onto-the-gcp-console-and-navigate-to-compute-engine">Log onto the GCP console and navigate to Compute Engine</h2>

<p><img src="../images/docker_on_GCP/step-0-select-compute-engine.png" alt="step-0-select-compute-engine" /></p>

<h1 id="step-1">Step 1</h1>

<h2 id="create-a-vm-instance">Create a VM instance</h2>

<p>Once you‚Äôve navigated to Compute Engine, click on the ‚ÄòCREATE INSTANCE‚Äô button on the top.</p>

<p><img src="../images/docker_on_GCP/step-1-create-instance.png" alt="step-1-create-instance" /></p>

<p>Here, we‚Äôll be leaving most of the configurations as the default but changing the OS and adding an extra disk.</p>

<p>Scroll down to ‚ÄòBoot disk‚Äô and click on ‚ÄòChange‚Äô.</p>

<p><img src="../images/docker_on_GCP/step-1-select-boot-disk.png" alt="step-1-select-boot-disk" /></p>

<p>Select the following options: <br />
<strong>Operating System:</strong> Ubuntu <br />
<strong>Version:</strong> Ubuntu 20.04 LTS <br />
<strong>Boot disk type:</strong> Balanced persistent disk <br />
<strong>Size (GB):</strong> 10</p>

<p>Next, scroll all the way to the bottom and select <u>'Management, security, disks, networking, sole tenancy'</u>.</p>

<p><em><strong>Optional:</strong> You can enable HTTP and HTTPS traffic as shown below if you are planning to setup a web server.</em></p>

<p><img src="../images/docker_on_GCP/step-1-add-storage.png" alt="step-1-add-storage" /></p>

<p>Click on the ‚ÄòDisks‚Äô option and select ‚Äò<strong>+</strong> Add new disk‚Äô. You can keep most of the configurations as the default. The only thing I‚Äôd consider changing is the ‚Äò<strong>Name</strong>‚Äô and ‚Äò<strong>Size (GB)</strong>‚Äô. I‚Äôll be making my disk size 50 GB.</p>

<p><img src="../images/docker_on_GCP/step-1-select-disk-option.png" alt="step-1-select-disk-option" /></p>

<p>Once you‚Äôre satisfied with your instance, click on the ‚ÄòCreate‚Äô button down the bottom. Give Google Cloud a few minutes to have your instance up and running. Wait for this to finish before moving on to the next step.</p>

<h1 id="step-2">Step 2</h1>

<h2 id="ssh-into-the-instance">SSH into the instance</h2>

<p>Now that you have the instance running, it‚Äôs time to SSH into the instance and start setting up Docker.</p>

<p>There‚Äôs a couple of ways to SSH into the instance. For this tutorial, I will use the browser option by clicking on the SSH button from the GCP console.</p>

<p><img src="../images/docker_on_GCP/step-2-ssh.png" alt="step-2-ssh" /></p>

<h1 id="step-3">Step 3</h1>

<h2 id="make-sure-you-have-no-versions-of-docker-installed">Make sure you have no versions of Docker installed</h2>

<p>Once you‚Äôve SSH‚Äôd into the instance, we want to ensure that we have no versions of Docker installed.</p>

<p>The command shown below will remove any versions of Docker you already have installed if there are any present. Copy/paste this command into your instance‚Äôs CLI.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>apt-get remove docker docker-engine docker.io containerd runc
</code></pre></div></div>

<h1 id="step-4">Step 4</h1>

<h2 id="installing-docker">Installing Docker</h2>

<p>Now it‚Äôs time to install Docker. The first thing you‚Äôll have to do is add Docker‚Äôs official GPG signing key. This is used to ensure that the package we are getting is valid.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>curl <span class="nt">-fsSL</span> https://download.docker.com/linux/ubuntu/gpg | <span class="nb">sudo </span>gpg <span class="nt">--dearmor</span> <span class="nt">-o</span> /usr/share/keyrings/docker-archive-keyring.gpg
</code></pre></div></div>
<p>Next, add Docker‚Äôs official stable repository using the following command.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">echo</span> <span class="se">\</span>
  <span class="s2">"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu </span><span class="se">\</span><span class="s2">
  </span><span class="si">$(</span>lsb_release <span class="nt">-cs</span><span class="si">)</span><span class="s2"> stable"</span> | <span class="nb">sudo tee</span> /etc/apt/sources.list.d/docker.list <span class="o">&gt;</span> /dev/null
</code></pre></div></div>

<p>Now that we have the repository setup, we are ready to install Docker Engine. To do this, run the following 2 commands. The first command will refresh the apt cache, while the second will install Docker community edition on our instance.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>apt-get update
<span class="nv">$ </span><span class="nb">sudo </span>apt-get <span class="nb">install </span>docker-ce docker-ce-cli containerd.io
</code></pre></div></div>

<h1 id="step-5">Step 5</h1>

<h2 id="check-if-docker-has-been-installed-correctly">Check if Docker has been installed correctly</h2>

<p>There are a few ways we can see if Docker has been installed correctly.</p>

<p>The first thing we can do is run the following commands to check the status and the version installed.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>systemctl status docker
<span class="nv">$ </span>docker <span class="nt">--version</span>
</code></pre></div></div>

<p>Next, login as the root user and give permission to the current user to be able to run docker commands. Replace ${USER} with your username.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo</span> <span class="nt">-i</span>
<span class="nv">$ </span><span class="nb">sudo </span>usermod <span class="nt">-aG</span> docker <span class="k">${</span><span class="nv">USER</span><span class="k">}</span>
</code></pre></div></div>
<p>Finally, log back in as the previous user and run your first container using the following commands.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>su - <span class="k">${</span><span class="nv">USER</span><span class="k">}</span>
<span class="nv">$ </span>docker run hello-world
</code></pre></div></div>

<p>At this point, you should see the ‚ÄúHello from Docker!‚Äù message like below. If you don‚Äôt see this message, check that you have given permissions to the current user; otherwise, re-visit the previous steps and see if you missed anything.</p>

<p><img src="../images/docker_on_GCP/step-5-hello-world-message.png" alt="step-5-hello-world-message" /></p>

<h1 id="thats-it">That‚Äôs It!</h1>

<p>Well done! You should now have Docker setup on your VM instance and can start running containerized applications in the cloud.</p>

<p>Keep in mind that if you decide to run a web-server such as Apache/Nginx in a container, ensure you check firewall rules. Otherwise, you will not see anything when attempting to connect via HTTP/HTTPS.</p>

<p>If you have any questions about this tutorial, feel free to reach out!</p>

<h1 id="contact">Contact</h1>

<p>You can find me on any of the following places!</p>
<ul>
  <li>Website: <a href="">https://thanesh.io/</a></li>
  <li>Email: <a href="">thanesh.pannirselvam@gmail.com</a></li>
  <li>LinkedIn: <a href="https://linkedin.com/in/thanesh-pannirselvam">linkedin.com/in/thanesh-pannirselvam</a></li>
</ul>

:ET