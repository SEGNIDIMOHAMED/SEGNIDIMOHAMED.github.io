I"ß<p>Iâ€™ve been learning about the cloud recently and keep coming across the term virtualization. The idea of virtualization comes in two flavours: containerization and virtual machines (VMs).</p>

<p>Essentially, virtualization came about to solve one key problem; efficency. Before we can understand this concept, we have to take a look at the history of serving applications.</p>

<h2 id="before-vms">Before VMs</h2>

<p>In the past, when a business wanted to host an application they had to procure a physical server. The business had to speculate the demand for the application upfront, before making the purchase. As such, they were likely to buy a high end server which costs a lot of money.</p>

<p>Besides this, they would also incur monthly expenses like energy, workforce and licenses. After spending all this money, they might realise that only a fraction of capacity is used.</p>

<p><img src="../images/containers_and_vms/Multiple_Server_.jpeg" alt="servers" /></p>

<h2 id="before-containers">Before Containers</h2>

<p>The concept of VMs was first widely adopted in the late 1990s when VMware launched their product to enable multiple operating systems to be run on a single machine. This meant that companies could make better use of their server resources.</p>

<h2 id="today">Today</h2>

<p>cloud recently and keep coming across terms such as containerization and Virtual machines (VMs). Although both these concepts are not limited to the cloud, they are become more prevalent as we move into this space.</p>

<p>In this blog post, I aim to explain what containers and VMs are. If you are looking to get into the infrastructure side of things, these concepts are a must know.</p>

<h1 id="virtual-machines">Virtual Machines</h1>

<p>Virtual Machines or VMs are said to be the foundation of cloud computing. Fundamentally, a VM is a emulation of a physical computer. VMs enable us to divide a serverâ€™s resources into several emulated computers. For example, imagine we have a server that has 8 CPU cores and 4GM RAM.</p>

<p>Then we might be able to divide this server into 2 VMâ€™s: <br />
<strong>VM 1</strong> <br />
vCPU: 4 Cores <br />
vRAM: 2GB <br />
OS: Windows Server <br /></p>

<p><strong>VM 2</strong> <br />
vCPU: 4 Cores <br />
vRAM: 2GB <br />
OS: Linux Ubuntu <br /></p>

<p>This means that we are virtualizing the underlying hardware allowing us to divide up our resources.</p>

<p>From a cloud perspective, when you spin up an instance, you are getting a VM with resources from a physical server shared amongst many other users.</p>

<h1 id="containers">Containers</h1>

<p>In contrast, containers aim to virtualize the operating system, only containing the application and its libraries and dependencies.</p>

<p>Containers are small, fast, and portable because they do not include a guest OS in every instance.</p>

<p>Containers allow us to make even better use of our resources as we donâ€™t have to predefine the amount of resources we will need.</p>

<p>From a cloud perspective, this gives us the flexibility to ship our code between different cloud providers with relative ease.</p>

<h1 id="final-thoughts">Final Thoughts</h1>

<p>Both VMs and Containers have their place. In the cloud, containers are usually used on top of VMs, which if you think about it can allow you to make more effective use of an instance.</p>

<p>I donâ€™t believe you can say that one is better than the other but they both can be used for different cases. Containers have allowed us to make some processes more efficient.</p>
:ET