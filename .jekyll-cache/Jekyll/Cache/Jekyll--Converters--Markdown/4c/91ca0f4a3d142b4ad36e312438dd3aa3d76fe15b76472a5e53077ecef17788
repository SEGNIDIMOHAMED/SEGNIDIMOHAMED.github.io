I"Yb<p>We all know how tedious clicking around the AWS Console can be.</p>

<p>You have to remember to create all the right resources, in the right order, and in the right region before anything works.</p>

<p>If you don’t obey these laws, you’ll be gifted with errors and frustration.</p>

<p>But eventually, with persistence, you’ll figure it out, and all will be well… Until you have to do it again.</p>

<p>Anyways, this is what it was like for me.</p>

<p>So, in this blog, I will demonstrate how you can use Terraform and Github Actions to streamline this deployment process.</p>

<p style="margin-top: 3%; text-align:center;">
<img style="box-shadow: 0px 0px 10px 0px rgb(0 0 0 / 50%); max-width: 85%" src="../images/terraform-gh-actions/deployment-diagram.jpeg" />
<p style="margin: -1% 0 3% 7.8%; font-style: italic;">Figure 1: High Level Implementation Diagram</p>
</p>

<h2 id="prerequisites">Prerequisites</h2>

<p>Before you get started, here are few things you’ll need:</p>
<ul>
  <li>AWS account with IAM user and programmatic access.</li>
  <li>Terraform installed on your local machine.</li>
  <li>Github repository containing your static site.</li>
  <li>Basic understanding of Terraform and Git.</li>
</ul>

<h2 id="create-a-terraform-configuration">Create a Terraform Configuration</h2>

<p>If you aren’t aware, Terraform is an Infrastructure as Code (IaC) tool designed to help provision resources in the cloud. By writing HCL (Hashicorp Configuration Language), individuals can create cloud resources in an automated and consistent way.</p>

<p>For deploying a static site in AWS, you will need to describe the following resources in HCL:</p>

<ul>
  <li>S3 Bucket for static files.</li>
  <li>CloudFront Distribution for delivering the website.</li>
  <li>Route 53 to route traffic from a domain name to the CloudFront Distribution.</li>
  <li>SSL Certificate in ACM to enable <code class="language-plaintext highlighter-rouge">HTTPS</code> traffic.</li>
</ul>

<p>One thing to note is that in HCL, order <strong>does not</strong> matter. As long as you describe the right resources, Terraform will figure out the order to provision them for you.</p>

<p>If you’d like to see my complete Terraform configuration, you can check it out here - <a href="https://github.com/thaneshp/terraform-aws-static-website">https://github.com/thaneshp/terraform-aws-static-website</a></p>

<p>However, following my guideline below, you can create one of your own.</p>

<p><strong>Note:</strong> I haven’t included much code in this blog, as you can find everything you need from the Terraform AWS documentation - <a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs">https://registry.terraform.io/providers/hashicorp/aws/latest/docs</a></p>

<h3 id="add-aws-providers">Add AWS Providers</h3>

<p>Typically, when you start writing a config, you have to declare a provider so that Terraform can interact with the respective cloud service.</p>

<p>For this config, you will have to denote two providers; one set in <code class="language-plaintext highlighter-rouge">ap-southeast-2</code> and the other in <code class="language-plaintext highlighter-rouge">us-east-1</code>.</p>

<p>This is because CloudFront will only accept SSL certificates created in <code class="language-plaintext highlighter-rouge">us-east-1</code>; therefore, we will need to reference this provider when requesting a certificate.</p>

<div class="language-hcl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># AWS provider for ap-southeast-1 region. Used as default.</span>
<span class="nx">provider</span> <span class="s2">"aws"</span> <span class="p">{</span>
  <span class="nx">access_key</span> <span class="p">=</span> <span class="nx">var</span><span class="err">.</span><span class="nx">aws_access_key</span>
  <span class="nx">secret_key</span> <span class="p">=</span> <span class="nx">var</span><span class="err">.</span><span class="nx">aws_secret_key</span>
  <span class="nx">region</span>     <span class="p">=</span> <span class="s2">"ap-southeast-1"</span>
<span class="p">}</span>

<span class="c1"># AWS provider for us-east-1 region.</span>
<span class="nx">provider</span> <span class="s2">"aws"</span> <span class="p">{</span>
  <span class="nx">alias</span>      <span class="p">=</span> <span class="s2">"us-east-1"</span>
  <span class="nx">access_key</span> <span class="p">=</span> <span class="nx">var</span><span class="err">.</span><span class="nx">aws_access_key</span>
  <span class="nx">secret_key</span> <span class="p">=</span> <span class="nx">var</span><span class="err">.</span><span class="nx">aws_secret_key</span>
  <span class="nx">region</span>     <span class="p">=</span> <span class="s2">"us-east-1"</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="creating-the-s3-bucket">Creating the S3 Bucket</h3>

<p>Once the providers are organised, you can start declaring the S3 Bucket creation.</p>

<p>Since you’ll be hosting a website, you will need the following resources:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">aws_s3_bucket</code></li>
  <li><code class="language-plaintext highlighter-rouge">aws_s3_bucket_acl</code></li>
  <li><code class="language-plaintext highlighter-rouge">aws_s3_bucket_website_configuration</code></li>
  <li><code class="language-plaintext highlighter-rouge">aws_s3_bucket_versioning</code></li>
  <li><code class="language-plaintext highlighter-rouge">aws_s3_bucket_policy</code></li>
</ul>

<p>Under the <code class="language-plaintext highlighter-rouge">aws_s3_bucket_policy</code> resource, you’ll also have to add the following policy; replacing <code class="language-plaintext highlighter-rouge">wiki.thanesh.io</code> with your domain name.</p>

<p>This policy enables read access to the Bucket’s objects, necessary when hosting a website.</p>

<div class="language-hcl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Bucket Policy to allow read access to objects.</span>
<span class="nx">resource</span> <span class="s2">"aws_s3_bucket_policy"</span> <span class="s2">"website_bucket_allow_read_access_to_objects"</span> <span class="p">{</span>
  <span class="nx">bucket</span> <span class="p">=</span> <span class="nx">aws_s3_bucket</span><span class="err">.</span><span class="nx">website_bucket</span><span class="err">.</span><span class="nx">id</span>

  <span class="nx">policy</span> <span class="p">=</span> <span class="nx">jsonencode</span><span class="err">(</span><span class="p">{</span>
    <span class="s2">"Version"</span> <span class="err">:</span> <span class="s2">"2012-10-17"</span><span class="err">,</span>
    <span class="s2">"Statement"</span> <span class="err">:</span> <span class="p">[</span>
      <span class="p">{</span>
        <span class="s2">"Sid"</span> <span class="err">:</span> <span class="s2">"PublicReadGetObject"</span><span class="err">,</span>
        <span class="s2">"Effect"</span> <span class="err">:</span> <span class="s2">"Allow"</span><span class="err">,</span>
        <span class="s2">"Principal"</span> <span class="err">:</span> <span class="s2">"*"</span><span class="err">,</span>
        <span class="s2">"Action"</span> <span class="err">:</span> <span class="s2">"s3:GetObject"</span><span class="err">,</span>
        <span class="s2">"Resource"</span> <span class="err">:</span> <span class="s2">"arn:aws:s3:::wiki.thanesh.io/*"</span>
      <span class="p">}</span>
    <span class="p">]</span>
  <span class="p">}</span><span class="err">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="request-an-ssl-certificate-via-acm">Request an SSL Certificate via ACM</h3>

<p>To enable <code class="language-plaintext highlighter-rouge">HTTPS</code> traffic, you will need an SSL certificate. This certificate is used when creating a CloudFront distribution; hence, it must be requested before the distribution.</p>

<p>As I mentioned before, this certificate has to be based in <code class="language-plaintext highlighter-rouge">us-east-1</code> to be used by CloudFront. Therefore, ensure you reference this provider in your config.</p>

<p>Depending on your needs, you may use a wildcard asterisk for your domain name, e.g. <code class="language-plaintext highlighter-rouge">*.thanesh.io</code>. This means that the certificate can cover more variations of your domain, e.g. <code class="language-plaintext highlighter-rouge">blog.thanesh.io</code> or <code class="language-plaintext highlighter-rouge">wiki.thanesh.io</code>.</p>

<p>Under <code class="language-plaintext highlighter-rouge">subject_alternative_names</code>, include your base domain to cover all variations that you’ll possibly be using.</p>

<div class="language-hcl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Request SSL Certificate in ACM.</span>
<span class="nx">resource</span> <span class="s2">"aws_acm_certificate"</span> <span class="s2">"cert"</span> <span class="p">{</span>
  <span class="nx">provider</span>                  <span class="p">=</span> <span class="nx">aws</span><span class="err">.</span><span class="nx">us</span><span class="err">-</span><span class="nx">east</span><span class="err">-</span><span class="mi">1</span>
  <span class="nx">domain_name</span>               <span class="p">=</span> <span class="s2">"*.thanesh.io"</span>
  <span class="nx">subject_alternative_names</span> <span class="p">=</span> <span class="p">[</span><span class="nx">thanesh</span><span class="err">.</span><span class="nx">io</span><span class="p">]</span>
  <span class="nx">validation_method</span>         <span class="p">=</span> <span class="s2">"DNS"</span>

  <span class="nx">lifecycle</span> <span class="p">{</span>
    <span class="nx">create_before_destroy</span> <span class="p">=</span> <span class="kc">true</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="create-a-cloudfront-distribution">Create a CloudFront Distribution</h3>

<p>Now that you have an SSL certificate, you can create the CloudFront Distribution.</p>

<p>If you aren’t aware, the CloudFront service distributes your website across AWS edge locations to improve performance for the end-user.</p>

<p>In this part of the config, you’ll have to reference your website’s bucket domain name and the previously created SSL certificate.</p>

<p>You’ll also have to provide an <code class="language-plaintext highlighter-rouge">origin_id</code> which you can name what you like. If you’re wondering, an origin in CloudFront specifies where the content is stored and where it gets content to serve to viewers. So try to make this name meaningful.</p>

<p>Lastly, if you’d like to use a caching policy, you can specify one under <code class="language-plaintext highlighter-rouge">default_cache_behavior</code>. You can find all the managed policies offered by AWS here - <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html">https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html</a></p>

<p><strong>Note:</strong> The <code class="language-plaintext highlighter-rouge">cache_policy_id</code> option requires the ‘ID’ and not the ‘Name’. Example: <code class="language-plaintext highlighter-rouge">"658327ea-f89d-4fab-a63d-7e88639e58f6"</code></p>

<div class="language-hcl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Cloudfront Distribution for S3 bucket.</span>
<span class="nx">resource</span> <span class="s2">"aws_cloudfront_distribution"</span> <span class="s2">"website_bucket_s3_distribution"</span> <span class="p">{</span>
  <span class="nx">origin</span> <span class="p">{</span>
    <span class="nx">domain_name</span> <span class="p">=</span> <span class="nx">aws_s3_bucket</span><span class="err">.</span><span class="nx">website_bucket</span><span class="err">.</span><span class="nx">bucket_regional_domain_name</span>
    <span class="nx">origin_id</span>   <span class="p">=</span> <span class="nx">format</span><span class="err">(</span><span class="s2">"%s%s"</span><span class="err">,</span><span class="s2">"S3-Website-"</span><span class="err">,</span><span class="nx">aws_s3_bucket</span><span class="err">.</span><span class="nx">website_bucket</span><span class="err">.</span><span class="nx">bucket_regional_domain_name</span><span class="err">)</span>
  <span class="p">}</span>

  <span class="nx">enabled</span>             <span class="p">=</span> <span class="kc">true</span>
  <span class="nx">is_ipv6_enabled</span>     <span class="p">=</span> <span class="kc">true</span>
  <span class="nx">default_root_object</span> <span class="p">=</span> <span class="s2">"index.html"</span>

  <span class="nx">aliases</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"wiki.thanesh.io"</span><span class="p">]</span>

  <span class="nx">default_cache_behavior</span> <span class="p">{</span>
    <span class="nx">allowed_methods</span>  <span class="p">=</span> <span class="p">[</span><span class="s2">"DELETE"</span><span class="p">,</span> <span class="s2">"GET"</span><span class="p">,</span> <span class="s2">"HEAD"</span><span class="p">,</span> <span class="s2">"OPTIONS"</span><span class="p">,</span> <span class="s2">"PATCH"</span><span class="p">,</span> <span class="s2">"POST"</span><span class="p">,</span> <span class="s2">"PUT"</span><span class="p">]</span>
    <span class="nx">cached_methods</span>   <span class="p">=</span> <span class="p">[</span><span class="s2">"GET"</span><span class="p">,</span> <span class="s2">"HEAD"</span><span class="p">]</span>
    <span class="nx">cache_policy_id</span>  <span class="p">=</span> <span class="nx">var</span><span class="err">.</span><span class="nx">managed_caching_policy</span>
    <span class="nx">target_origin_id</span> <span class="p">=</span> <span class="nx">format</span><span class="err">(</span><span class="s2">"%s%s"</span><span class="err">,</span><span class="s2">"S3-Website-"</span><span class="err">,</span><span class="nx">aws_s3_bucket</span><span class="err">.</span><span class="nx">website_bucket</span><span class="err">.</span><span class="nx">bucket_regional_domain_name</span><span class="err">)</span>

    <span class="nx">viewer_protocol_policy</span> <span class="p">=</span> <span class="s2">"redirect-to-https"</span>
    <span class="nx">min_ttl</span>                <span class="p">=</span> <span class="mi">0</span>
    <span class="nx">default_ttl</span>            <span class="p">=</span> <span class="mi">3600</span>
    <span class="nx">max_ttl</span>                <span class="p">=</span> <span class="mi">86400</span>
  <span class="p">}</span>

  <span class="nx">restrictions</span> <span class="p">{</span>
    <span class="nx">geo_restriction</span> <span class="p">{</span>
      <span class="nx">restriction_type</span> <span class="p">=</span> <span class="s2">"none"</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="nx">viewer_certificate</span> <span class="p">{</span>
    <span class="nx">acm_certificate_arn</span> <span class="p">=</span> <span class="nx">aws_acm_certificate</span><span class="err">.</span><span class="nx">cert</span><span class="err">.</span><span class="nx">arn</span>
    <span class="nx">ssl_support_method</span>  <span class="p">=</span> <span class="s2">"sni-only"</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="add-record-set-in-route-53">Add Record Set in Route 53</h3>

<p>At this stage, you should have everything needed to host and deliver a static site—however, not much way to conveniently share it.</p>

<p>This is where you will need to set up Route 53 to have your domain route to your CloudFront Distribution.</p>

<p>In my case, I already had an existing hosted zone in Route 53, so I just added an additional <code class="language-plaintext highlighter-rouge">A</code> record to cover my new site.</p>

<p>To do the same, you would use the <code class="language-plaintext highlighter-rouge">aws_route53_record</code> resource and specify the following:</p>

<ul>
  <li>The <code class="language-plaintext highlighter-rouge">zone_id</code> of the hosted zone</li>
  <li>The domain name of the website (e.g. wiki.thanesh.io)</li>
  <li>The record type (e.g. A)</li>
  <li>Details about the CloudFront distribution</li>
</ul>

<p><strong>Note:</strong> The <code class="language-plaintext highlighter-rouge">zone_id</code> parameter in the <code class="language-plaintext highlighter-rouge">aws_route53_record</code> resource only accepts the <code class="language-plaintext highlighter-rouge">zone_id</code> of the hosted zone and not its name. You can reference the <code class="language-plaintext highlighter-rouge">zone_id</code> similar to how I have below.</p>

<div class="language-hcl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Retrieve existing hosted zone.</span>
<span class="nx">data</span> <span class="s2">"aws_route53_zone"</span> <span class="s2">"my_domain"</span> <span class="p">{</span>
  <span class="nx">name</span> <span class="p">=</span> <span class="nx">var</span><span class="err">.</span><span class="nx">hosted_zone</span>
<span class="p">}</span>

<span class="c1"># Add A record in Route53 for website.</span>
<span class="nx">resource</span> <span class="s2">"aws_route53_record"</span> <span class="s2">"website_record"</span> <span class="p">{</span>
  <span class="nx">zone_id</span> <span class="p">=</span> <span class="nx">data</span><span class="err">.</span><span class="nx">aws_route53_zone</span><span class="err">.</span><span class="nx">my_domain</span><span class="err">.</span><span class="nx">zone_id</span>
  <span class="nx">name</span>    <span class="p">=</span> <span class="nx">var</span><span class="err">.</span><span class="nx">website_domain_name</span>
  <span class="nx">type</span>    <span class="p">=</span> <span class="s2">"A"</span>

  <span class="nx">alias</span> <span class="p">{</span>
    <span class="nx">name</span>                   <span class="p">=</span> <span class="nx">aws_cloudfront_distribution</span><span class="err">.</span><span class="nx">website_bucket_s3_distribution</span><span class="err">.</span><span class="nx">domain_name</span>
    <span class="nx">zone_id</span>                <span class="p">=</span> <span class="nx">aws_cloudfront_distribution</span><span class="err">.</span><span class="nx">website_bucket_s3_distribution</span><span class="err">.</span><span class="nx">hosted_zone_id</span>
    <span class="nx">evaluate_target_health</span> <span class="p">=</span> <span class="kc">false</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="provision-the-infrastructure">Provision the Infrastructure</h3>

<p>Now that you have everything needed to host your static site in AWS, it’s time to provision the infrastructure.</p>

<p>To do this, run the following commands.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Verifies whether a configuration is syntactically valid and internally consistent</span>
terraform validate

<span class="c"># Used for creating an executing plan.</span>
terraform plan

<span class="c"># Executes the actions proposed in a Terraform plan.</span>
terraform apply
</code></pre></div></div>

<h2 id="set-up-github-actions">Set Up Github Actions</h2>

<p>All your infrastructure is now ready, and it’s time to deploy your site.</p>

<p>You may be tempted to drag and drop all your static files right into the S3 Bucket. But there is a better way.</p>

<p>In this part of the blog, I will show you how to set up Github Actions to automatically deploy your website to the S3 Bucket.</p>

<p>If you prefer a video tutorial, you can check out the one I made here - <a href="https://www.youtube.com/watch?v=ifqG6tGhHHE">https://www.youtube.com/watch?v=ifqG6tGhHHE</a></p>

<h3 id="add-your-aws-secrets-to-the-github-repository">Add your AWS Secrets to the Github Repository</h3>

<ol>
  <li>Navigate to website’s Github Repo using the web UI.</li>
  <li>Click on Settings -&gt; Secrets -&gt; Actions.</li>
</ol>
<p style="margin-top: 2%; margin-left: 1.3%; text-align:left;">
<img style="box-shadow: 0px 0px 10px 0px rgb(0 0 0 / 50%); max-width: 70%" src="../images/terraform-gh-actions/gh-secrets-location.png" />
</p>
<ol>
  <li>Click on ‘New repository secret’ in the top right-hand corner.</li>
  <li>Create new 3 secrets for: <code class="language-plaintext highlighter-rouge">AWS_S3_BUCKET</code>, <code class="language-plaintext highlighter-rouge">AWS_ACCESS_KEY_ID</code> and <code class="language-plaintext highlighter-rouge">AWS_SECRET_ACCESS_KEY</code>, adding their respective values.</li>
</ol>

<h3 id="create-a-new-directory-in-your-websites-repo">Create a new Directory in your Website’s Repo</h3>

<p>On your local machine, navigate to your website’s directory and create the following directories: <code class="language-plaintext highlighter-rouge">.github/workflows</code></p>

<p>You can use the following command if you’re on Mac/Linux: <code class="language-plaintext highlighter-rouge">mkdir .github/workflows</code></p>

<p>Github Actions looks in this folder for a <code class="language-plaintext highlighter-rouge">.yaml</code> file containing workflow instructions.</p>

<h3 id="create-a-yaml-file">Create a YAML file</h3>

<p>In the same directory, create a file called <code class="language-plaintext highlighter-rouge">main.yaml</code>.</p>

<p>This is where you will add the config for Github Actions to execute.</p>

<h3 id="add-actions-to-the-yaml-file">Add actions to the YAML file</h3>

<p>Once you have created the YAML file, you need to add some actions to tell Github what to do with your repo.</p>

<p>Below is the config I used. This config builds and deploys my Jekyll site on <code class="language-plaintext highlighter-rouge">push</code> to the <code class="language-plaintext highlighter-rouge">main</code> branch. I got this config from <a href="https://github.com/marketplace/actions/build-jekyll">here</a> and made a few adjustments.</p>

<p>If you’re not using a Jekyll site, you may want to create/find a different config. Here is one that I used for another site (pure HTML, CSS and JS) - <a href="https://github.com/jakejarvis/s3-sync-action">https://github.com/jakejarvis/s3-sync-action</a>.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">on</span><span class="pi">:</span>
  <span class="na">push</span><span class="pi">:</span>
    <span class="na">branches</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">main</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">jekyll</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Build and deploy Jekyll site</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>

    <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v2</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Build</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">jerryjvl/jekyll-build-action@v1</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Configure AWS credentials</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">aws-actions/configure-aws-credentials@v1</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">aws-access-key-id</span><span class="pi">:</span> <span class="s">$</span>
        <span class="na">aws-secret-access-key</span><span class="pi">:</span> <span class="s">$</span>
        <span class="na">aws-region</span><span class="pi">:</span> <span class="s">ap-southeast-2</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Sync output to S3</span>
      <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
        <span class="s">aws s3 sync ./_site/ s3://$ --delete</span>
</code></pre></div></div>

<h3 id="push-your-changes-to-github">Push your changes to Github</h3>

<p>Once the config is ready, you can push your changes to Github, and your website will be automatically uploaded to the S3.</p>

<p>And that’s it; your static site is live and will auto-update every time you push to your repository.</p>

:ET