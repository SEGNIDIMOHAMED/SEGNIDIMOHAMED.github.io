I"<p>I’ve been learning about the cloud recently and keep coming across the term virtualization. The idea of virtualization comes in two flavours: containerization and virtual machines (VMs).</p>

<p>Essentially, virtualization came about to solve one key problem; efficency. Before we can understand this concept, we have to take a look at the history of serving applications.</p>

<h1 id="a-time-before-virtualization">A time before Virtualization</h1>

<p>In the past, when a business wanted to host an application they had to procure a physical server. The business had to speculate the demand for the application upfront, before making the purchase. As such, they were likely to buy a high end server which costs a lot of money.</p>

<p>Besides this, they would also incur monthly expenses like energy, workforce and licenses. After spending all this money, they might realise that only a fraction of capacity is used. However, there was no way to allocate or make use of the resources that weren’t needed. This is where Virtual Machines come in.</p>

<p align="center">
<br />
<img src="../images/containers_and_vms/server.png" />
</p>

<h1 id="virtual-machines">Virtual Machines</h1>

<p>The industry realised that having one server per application was rigid, clunky and expensive. As such, in the late 1990s, VMware came out with a product which would solve this issue.</p>

<p>Virtualization, enabled by VMware would allow organisations to squeeze more from their physical servers. Essentially, this technology virtualises the hardware of the physical server allowing the emulation of multiple computers on a single device.</p>

<p>For example, we can divide a server’s resources into 3 VMs and have a seperate application running on each VM. Each VM is isolated from the other and has the required resources to perform its given task. This enabled better hardware utilization but created a lot of overhead due to the necessary OS installation.</p>

<!-- This means that we are virtualizing the underlying hardware allowing us to divide up our resources.

From a cloud perspective, when you spin up an instance, you are getting a VM with resources from a physical server shared amongst many other users. -->

<p align="center">
<br />
<img src="../images/containers_and_vms/vms.png" />
</p>

<h1 id="containers">Containers</h1>

<p>Unlike a VM, a container does not require it’s own operating system. Containers virtualises the operating system, sharing the host kernel.</p>

<p>Each container packagaes your application code and it’s dependencies together. The application thinks it is running on a dedicated OS and hardware but in reality it is sharing the from the host OS.</p>

<p>However, compared to VMs, we are only managing one OS. No matter how many containers you have, there is only one host OS that needs to be managed, i.e. reducing associated costs such as licences.</p>

<p>A container is very small compared to a VM and can boot up in far lesser time. It also provides portability as it is not dependent on the underlying OS.</p>

<p>This means we can run code virtually anywhere with relative ease: multiple cloud providers, on-premise, local machines or even on VMs.</p>

<p align="center">
<br />
<img src="../images/containers_and_vms/container.png" width="400" height="400" />
</p>

<h1 id="final-thoughts">Final Thoughts</h1>

<p>Both VMs and Containers continue to serve a purpose in today’s world. For example, when you request an instance on the cloud, you are given access to a virtual machine. Basically, the provider allocates some of their hardware for you to use, isolated from the rest of their users. You can then further leverage this instance by running containers on it.</p>

<ul>
  <li>further leveraging the resources</li>
</ul>

<p>In the cloud, containers are usually used on top of VMs, which if you think about it can allow you to make more effective use of an instance.</p>

<p>I don’t believe you can say that one is better than the other but they both can be used for different cases. Containers have allowed us to make some processes more efficient.</p>
:ET