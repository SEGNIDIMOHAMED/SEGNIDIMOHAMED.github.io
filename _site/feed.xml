<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://blog.thanesh.io//feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.thanesh.io//" rel="alternate" type="text/html" /><updated>2022-01-05T15:14:01+11:00</updated><id>https://blog.thanesh.io//feed.xml</id><title type="html">blog</title><subtitle>Site Reliability Engineer from Melbourne</subtitle><entry><title type="html">Setting up an SFTP server with Secure Keys</title><link href="https://blog.thanesh.io//Setting-up-an-SFTP-server-with-secure-keys/" rel="alternate" type="text/html" title="Setting up an SFTP server with Secure Keys" /><published>2022-01-05T00:00:00+11:00</published><updated>2022-01-05T00:00:00+11:00</updated><id>https://blog.thanesh.io//Setting-up-an-SFTP-server-with-secure-keys</id><content type="html" xml:base="https://blog.thanesh.io//Setting-up-an-SFTP-server-with-secure-keys/">&lt;p&gt;I’ve recently come across SFTP (SSH File Transfer Protocol) servers and wanted to set one up of my own. I created a simple Linux VM on GCP, added a new user, enabled password authentication, and I was ready to use this server. However, this wasn’t an ideal solution.&lt;/p&gt;

&lt;p&gt;For one, the server wasn’t very secure as it allowed users to authenticate via password rather than SSH keys. Also, the newly created user would have access to all directories and privileges beyond those needed for SFTP duties.&lt;/p&gt;

&lt;p&gt;Hence, to make this server more secured, I configured SSH key access and restricted the permissions of the SFTP user. This blog will show you how to go about doing the same.&lt;/p&gt;

&lt;h1 id=&quot;step-0&quot;&gt;Step 0&lt;/h1&gt;

&lt;h2 id=&quot;provision-a-linux-vm&quot;&gt;Provision a Linux VM&lt;/h2&gt;

&lt;p&gt;Before you proceed, this tutorial assumes you already have a Linux box set up with console/shell access.&lt;/p&gt;

&lt;p&gt;If you don’t already have one, you can easily create a VM on a cloud provider or install Linux on an old device you have at home.&lt;/p&gt;

&lt;p&gt;In this tutorial, I have used a CentOS VM hosted on GCP; however, you can choose a different distro or cloud provider, and the process will be similar.&lt;/p&gt;

&lt;h1 id=&quot;step-1&quot;&gt;Step 1&lt;/h1&gt;

&lt;h2 id=&quot;create-a-new-user&quot;&gt;Create a new user&lt;/h2&gt;

&lt;p&gt;Once you have your server ready, you will need to create a new user solely for SFTP purposes.&lt;/p&gt;

&lt;p&gt;Access the CLI of your newly created VM; create a new user, and set its password using the following commands.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;adduser sftp
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;passwd sftp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;step-2&quot;&gt;Step 2&lt;/h1&gt;

&lt;h2 id=&quot;enable-password-authentication-temporarily&quot;&gt;Enable Password Authentication (Temporarily)&lt;/h2&gt;

&lt;p&gt;Now that you have a new user, you will have to enable password authentication temporarily so that we can make changes to the server from our local machine.&lt;/p&gt;

&lt;p&gt;While in your server’s CLI, open and edit the SSH config file. You can do this using the following command.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;vi /etc/ssh/sshd_config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Press the ‘I’ key to insert into the file, and use the arrow keys to locate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PasswordAuthentication&lt;/code&gt;. Once you’ve found this, change this field to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yes&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# To disable tunneled clear text passwords, change to no here!&lt;/span&gt;
PasswordAuthentication &lt;span class=&quot;nb&quot;&gt;yes&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#PermitEmptyPasswords no&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#PasswordAuthentication no&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After you’ve amended this, save and exit the file by pressing the ESC key followed by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:wq&lt;/code&gt; and ENTER.&lt;/p&gt;

&lt;p&gt;Now, restart the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; service and check its status using the following commands.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;systemctl restart sshd
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;systemctl status sshd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also, check that you have SSH access from your local machine using your newly created user.&lt;/p&gt;

&lt;h1 id=&quot;step-3&quot;&gt;Step 3&lt;/h1&gt;

&lt;h2 id=&quot;generate-publicprivate-key-pair&quot;&gt;Generate public/private key pair&lt;/h2&gt;

&lt;p&gt;At this point, you will need to create an SSH key pair from your &lt;strong&gt;local machine&lt;/strong&gt; and copy the public key to your SFTP machine.&lt;/p&gt;

&lt;p&gt;Firstly, create the key pair by running the command below, noting the returned path as you’ll need it for the upcoming step.&lt;/p&gt;

&lt;div class=&quot;language-zsh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; rsa &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; 4096 &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sftp&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After creating the keys, copy the public key from your &lt;strong&gt;local machine&lt;/strong&gt; onto your SFTP server using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-copy-id&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-zsh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-copy-id &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;insert_path_of_ssh_key] sftp@&amp;lt;SERVER_IP&amp;gt;

&lt;span class=&quot;c&quot;&gt;#Example&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-copy-id &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; /Users/thaneshpannirselvam/.ssh/id_rsa.pub sftp@192.158.1.38
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;step-4&quot;&gt;Step 4&lt;/h1&gt;

&lt;h2 id=&quot;test-ssh-and-sftp-connection&quot;&gt;Test SSH and SFTP Connection&lt;/h2&gt;

&lt;p&gt;Now that you have copied over the public key, you will no longer need to have password authentication enabled. But, before disabling this, test that you can authenticate using your newly generated keys.&lt;/p&gt;

&lt;div class=&quot;language-zsh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;insert_path_of_ssh_key] sftp@192.158.1.38

&lt;span class=&quot;c&quot;&gt;#Example&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; /Users/thaneshpannirselvam/.ssh/id_rsa sftp@192.158.1.38
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Additionally, try to authenticate using an SFTP client such as Cyberduck or FileZilla.&lt;/p&gt;

&lt;p align=&quot;left&quot; style=&quot;margin-bottom: 3%; margin-top: 3%;&quot;&gt;
&lt;img src=&quot;../images/sftp-server/cyberduck-sftp-connection.png&quot; /&gt;
&lt;br /&gt; &lt;i&gt;Figure 1: SFTP Connection using Cyberduck Client.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Before proceeding to the next step, ensure you disable&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;passwordAuthentication&lt;/code&gt; &lt;strong&gt;by amending the SSH config file (as described in Step 2)&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;step-4-1&quot;&gt;Step 4&lt;/h1&gt;

&lt;h2 id=&quot;configure-sftp-space-and-restrict-access&quot;&gt;Configure SFTP space and restrict access&lt;/h2&gt;

&lt;p&gt;Right now, your user can SFTP into the server, but they also have shell access and access to other directories. If this meets your requirements, don’t worry about following the rest of the tutorial.&lt;/p&gt;

&lt;p&gt;However, creating a separate space for file transfers and restricting the SFTP user’s access would be a more secure option.&lt;/p&gt;

&lt;p&gt;To do this, create a new directory dedicated to file uploads and amend its permissions as shown below.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /home/sftp/uploads
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo chown &lt;/span&gt;root:root /home/sftp
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo chmod &lt;/span&gt;755 /home/sftp
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo chown &lt;/span&gt;sftp:sftp /home/sftp/uploads
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, limit the user to establish connection only via SFTP and restrict their access to a specific directory. To do this, edit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/ssh/sshd_config&lt;/code&gt;, adding this configuration to the end of the file.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Match User sftp
    ForceCommand internal-sftp
    PasswordAuthentication no
    ChrootDirectory /home/sftp
    PermitTunnel no
    AllowAgentForwarding no
    AllowTcpForwarding no
    X11Forwarding no
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Restart the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; service and check its status using the following commands.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;systemctl restart sshd
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;systemctl status sshd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, check that access via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; is disabled, and SFTP connections are only permitted to the directory you specified.&lt;/p&gt;

&lt;p align=&quot;left&quot;&gt;
&lt;br /&gt;
&lt;img src=&quot;../images/sftp-server/ssh-attempt.png&quot; /&gt;
&lt;br /&gt; &lt;i&gt;Figure 2: Only SFTP connections permitted, shell access for `sftp` user has been disabled.&lt;/i&gt;
&lt;/p&gt;

&lt;p align=&quot;left&quot;&gt;
&lt;br /&gt;
&lt;img src=&quot;../images/sftp-server/sftp-connection-chrooted.png&quot; /&gt;
&lt;br /&gt; &lt;i&gt;Figure 3: Successful SFTP connection, but unable to traverse other directories, as expected.&lt;/i&gt;
&lt;/p&gt;

&lt;h1 id=&quot;thats-it&quot;&gt;That’s It!&lt;/h1&gt;

&lt;p&gt;You’ve now set up your own SFTP server with SSH keys and restricted access. Using this server, you can trigger file uploads, schedule backups or manually upload content.&lt;/p&gt;

&lt;p&gt;I hope this walkthrough helped you. If you have any questions, feel free to reach out!&lt;/p&gt;</content><author><name></name></author><summary type="html">I’ve recently come across SFTP (SSH File Transfer Protocol) servers and wanted to set one up of my own. I created a simple Linux VM on GCP, added a new user, enabled password authentication, and I was ready to use this server. However, this wasn’t an ideal solution.</summary></entry><entry><title type="html">Why you need to use async/await?</title><link href="https://blog.thanesh.io//Why-you-need-to-use-async-await/" rel="alternate" type="text/html" title="Why you need to use async/await?" /><published>2021-10-25T00:00:00+11:00</published><updated>2021-10-25T00:00:00+11:00</updated><id>https://blog.thanesh.io//Why-you-need-to-use-async-await</id><content type="html" xml:base="https://blog.thanesh.io//Why-you-need-to-use-async-await/">&lt;p&gt;Recently, I have been working on the &lt;a href=&quot;https://github.com/zainafzal88/scrumblr-enhancement&quot;&gt;scrumblr-enhancement&lt;/a&gt; project on the &lt;a href=&quot;https://www.twitch.tv/roarcoders&quot;&gt;Roarcoders stream&lt;/a&gt;, where we have been attempting to display the boardName from the backend. However, we kept receiving a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;promise&lt;/code&gt; value that couldn’t be accessed directly. After some research, the way forward was to add an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async/await&lt;/code&gt;, enabling us to directly access and utilize the value.&lt;/p&gt;

&lt;p&gt;After implementing this, the solution felt familiar. Many times when I have been stuck trying to fetch a value from the backend, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async/await&lt;/code&gt; had solved the problem. And I don’t believe this is uncommon.&lt;/p&gt;

&lt;p&gt;In this blog, I will explain how &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async/await&lt;/code&gt; helped me solve this problem and why it works.&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-promise-value&quot;&gt;What is a promise value?&lt;/h2&gt;

&lt;p&gt;Before we dive into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async/await&lt;/code&gt;, it’s essential to understand what promises are. The English definition of a promise is: “a declaration or assurance that one will do something or that a particular thing will happen”. This definition applies to Javascript as well.&lt;/p&gt;

&lt;p&gt;Like real life, when we receive a promise, it will either be kept or won’t. In Javascript, there are three states of the Promise object which describe this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pending: Initial State, before the Promise succeeds or fails&lt;/li&gt;
  &lt;li&gt;Fulfilled: Completed Promise&lt;/li&gt;
  &lt;li&gt;Rejected: Failed Promise&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In our scrumblr-enhancement code, shown below, we were receiving a ‘fulfilled’ promise. This meant that the asynchronous operation was completed successfully, and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boardName&lt;/code&gt; was being retrieved.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getBoardById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;boardId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;board-heading&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;i&gt;Figure 1: Our first attempt to retrieve the boardName, without using async/await.&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;../images/async-await/fulfilled_promise.png&quot; /&gt;
&lt;br /&gt; &lt;i align=&quot;center&quot;&gt;Figure 2: The returned object, received as a promise value.&lt;/i&gt;&lt;/p&gt;

&lt;h2 id=&quot;so-how-do-you-access-the-promise-value&quot;&gt;So, how do you access the promise value?&lt;/h2&gt;

&lt;p&gt;This is where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async/await&lt;/code&gt; helped us.&lt;/p&gt;

&lt;p&gt;We turned the above code into a function and added the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async/await&lt;/code&gt; keywords. This successfully returned the value we needed to be displayed on the board.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getBoardName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;boardId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getBoardById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;boardId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;board-heading&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;i&gt;Figure 3: Creating a function and adding async/await to retrieve the boardName.&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;../images/async-await/returned_value.png&quot; /&gt;
&lt;br /&gt; &lt;i&gt;Figure 4: The returned value, this time received just as a string.&lt;/i&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-is-asyncawait&quot;&gt;What is async/await?&lt;/h2&gt;

&lt;p&gt;There are plenty of resources explaining &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async/await&lt;/code&gt;, so I’ll keep this brief.&lt;/p&gt;

&lt;p&gt;Basically, Javascript executes synchronously, meaning that it has the potential to block further execution until it has finished what it’s doing. Using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async&lt;/code&gt; keyword allows the program to continue running without stopping the main thread.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await&lt;/code&gt; keyword has to be used inside an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async&lt;/code&gt; function. Essentially, it makes Javascript wait until a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;promise&lt;/code&gt; object resolves to a value before moving on.&lt;/p&gt;

&lt;h2 id=&quot;why-did-asyncawait-solve-our-problem&quot;&gt;Why did async/await solve our problem?&lt;/h2&gt;

&lt;p&gt;In our case, we were attempting to retrieve the boardName from the backend by using fetch-API. However, making a network request is time-consuming, and we cannot afford to wait for the function to finish executing before proceeding.&lt;/p&gt;

&lt;p&gt;As such, Javascript returns a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;promise&lt;/code&gt; object indicating that it either received the value or didn’t. In this case, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;promise&lt;/code&gt; value was being fulfilled every time, but there is no guarantee that this would continue being the case.&lt;/p&gt;

&lt;p&gt;As a result, making the function asynchronous allows Javascript to continue fetching the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boardName&lt;/code&gt; from the backend whilst the frontend is being rendered.&lt;/p&gt;

&lt;p&gt;Using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await&lt;/code&gt; keyword means that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boardName&lt;/code&gt; would be resolved to a value that we can assign to a variable (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;result&lt;/code&gt; in the above code) and display on the board.&lt;/p&gt;</content><author><name></name></author><summary type="html">Recently, I have been working on the scrumblr-enhancement project on the Roarcoders stream, where we have been attempting to display the boardName from the backend. However, we kept receiving a promise value that couldn’t be accessed directly. After some research, the way forward was to add an async/await, enabling us to directly access and utilize the value.</summary></entry><entry><title type="html">How to set up ESXi on a machine with an incompatible NIC?</title><link href="https://blog.thanesh.io//How-to-setup-VMware-on-laptop/" rel="alternate" type="text/html" title="How to set up ESXi on a machine with an incompatible NIC?" /><published>2021-09-01T00:00:00+10:00</published><updated>2021-09-01T00:00:00+10:00</updated><id>https://blog.thanesh.io//How-to-setup-VMware-on-laptop</id><content type="html" xml:base="https://blog.thanesh.io//How-to-setup-VMware-on-laptop/">&lt;p&gt;If you are reading this blog, it’s likely you ran into the “No Network Adaptor” error whilst installing ESXi.&lt;/p&gt;

&lt;p&gt;I recently set up ESXi on an old Asus Laptop and ran into the same error. After tirelessly searching the internet, I managed to piece together a solution that worked for me.&lt;/p&gt;

&lt;p&gt;This blog will show you how to install ESXi on a laptop with an incompatible NIC. It should be noted that this is purely for learning purposes, and you should not be installing ESXi where your hardware may be incompatible.&lt;/p&gt;

&lt;h1 id=&quot;step-0&quot;&gt;Step 0&lt;/h1&gt;

&lt;h2 id=&quot;backup-your-device&quot;&gt;Backup your Device&lt;/h2&gt;

&lt;p&gt;If you have anything important on your computer, make sure you backup this up first.&lt;/p&gt;

&lt;p&gt;When you install ESXi, it will wipe out everything on the hard drive, so you will lose anything that you haven’t saved.&lt;/p&gt;

&lt;h1 id=&quot;step-1&quot;&gt;Step 1&lt;/h1&gt;

&lt;h2 id=&quot;determine-your-laptops-nic&quot;&gt;Determine your laptop’s NIC&lt;/h2&gt;

&lt;p&gt;You can find this information by using Device Manager on a Windows machine.&lt;/p&gt;

&lt;p&gt;Make a note of the NIC, as you will need this to find the appropriate ESXi driver.&lt;/p&gt;

&lt;h1 id=&quot;step-2&quot;&gt;Step 2&lt;/h1&gt;

&lt;h2 id=&quot;download-compatible-driver&quot;&gt;Download compatible driver&lt;/h2&gt;

&lt;p&gt;Once you’ve determined the NIC, you’ll have to find a compatible driver for it.&lt;/p&gt;

&lt;p&gt;The first place to check for a compatible driver is &lt;a href=&quot;https://vibsdepot.v-front.de/wiki/index.php/List_of_currently_available_ESXi_packages&quot;&gt;here&lt;/a&gt;. This website has a list of currently available drivers for a variety of NICs.&lt;/p&gt;

&lt;p&gt;If you don’t find it there, have a search online, and you could get lucky. I had to do this in my case as I couldn’t find a compatible driver from the link above.&lt;/p&gt;

&lt;p&gt;However, I did manage to find the driver I needed for an Atheros NIC at &lt;a href=&quot;https://www.gomeisa.net/2019/07/atheros-ar8151ar8161-realtek-r8168r8169.html?m=1&quot;&gt;https://www.gomeisa.net/2019/07/atheros-ar8151ar8161-realtek-r8168r8169.html?m=1&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately, if you still can’t find a driver after this, you don’t have many options remaining. You either have to build your own driver or consider changing the physical NIC of your machine.&lt;/p&gt;

&lt;p&gt;If you have found a driver, however, proceed with the remaining steps. Otherwise, the following won’t work for you.&lt;/p&gt;

&lt;h1 id=&quot;step-3&quot;&gt;Step 3&lt;/h1&gt;

&lt;h2 id=&quot;download-esxi-5x6x&quot;&gt;Download ESXi 5.x/6.x&lt;/h2&gt;

&lt;p&gt;At the time of writing, there are currently limited/no NIC drivers for ESXi 7. Due to this, you will likely have to download an older version of ESXi.&lt;/p&gt;

&lt;p&gt;You can find ESXi downloads by searching on Google. I used ESXi 6.0; this link can be found here - &lt;a href=&quot;https://customerconnect.vmware.com/downloads/details?productId=491&amp;amp;rPId=9954&amp;amp;downloadGroup=ESXI600&quot;&gt;https://customerconnect.vmware.com/downloads/details?productId=491&amp;amp;rPId=9954&amp;amp;downloadGroup=ESXI600&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The ESXi version you choose to install is up to you; however, remember to download a version compatible with the NIC driver you found. The location where you found the driver should give you an indicator of the ESXi version you need.&lt;/p&gt;

&lt;h1 id=&quot;step-4&quot;&gt;Step 4&lt;/h1&gt;

&lt;h2 id=&quot;download-and-edit-esxi-customizer-tool&quot;&gt;Download and Edit ESXi-Customizer Tool&lt;/h2&gt;

&lt;p&gt;You can find the ESXi-Customizer GUI Tool on - &lt;a href=&quot;https://www.v-front.de/p/esxi-customizer.html&quot;&gt;https://www.v-front.de/p/esxi-customizer.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you’re using this tool on Windows 10, you have to comment out line 260. You can do this by adding a “REM” in front of that line.&lt;/p&gt;

&lt;p&gt;To quickly find this line, use CTRL + F, and search for “Unsupported Windows Version”.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;br /&gt;
&lt;img src=&quot;../images/esxi_homelab/step_4_comment_line_260.png&quot; /&gt;
&lt;br /&gt; &lt;i&gt;Figure 1: Comment out the highlighted line to enable Windows 10 compatability.&lt;/i&gt;
&lt;/p&gt;

&lt;h1 id=&quot;step-5&quot;&gt;Step 5&lt;/h1&gt;

&lt;h2 id=&quot;create-custom-esxi-image&quot;&gt;Create custom ESXi Image&lt;/h2&gt;

&lt;p&gt;Using the tool, add the ESXi image, the driver you previously downloaded and select a location for the newly created image to be added to.&lt;/p&gt;

&lt;p&gt;The resulting file will contain an ESXi ISO image with the custom driver added.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;br /&gt;
&lt;img src=&quot;../images/esxi_homelab/step_5_custom_esxi_image.png&quot; /&gt;
&lt;br /&gt; &lt;i&gt;Figure 2: Add the ESXi image and custom NIC driver to create a custom image.&lt;/i&gt;
&lt;/p&gt;

&lt;h1 id=&quot;step-6&quot;&gt;Step 6&lt;/h1&gt;

&lt;h2 id=&quot;create-bootable-esxi-usb&quot;&gt;Create bootable ESXi USB&lt;/h2&gt;

&lt;p&gt;You can do this using tools like Rufus. You’ll need to use a USB with enough capacity and doesn’t contain any data you might need.&lt;/p&gt;

&lt;p&gt;Here is the tutorial I used, but you can find many similar ones through a simple search: &lt;br /&gt;
&lt;a href=&quot;https://www.virten.net/2014/12/howto-create-a-bootable-esxi-installer-usb-flash-drive/&quot;&gt;https://www.virten.net/2014/12/howto-create-a-bootable-esxi-installer-usb-flash-drive/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;step-7&quot;&gt;Step 7&lt;/h1&gt;

&lt;h2 id=&quot;install-esxi-on-your-machine&quot;&gt;Install ESXi on your machine&lt;/h2&gt;

&lt;p&gt;Insert the USB into your laptop and proceed with the installation following the on-screen prompts.&lt;/p&gt;

&lt;h1 id=&quot;thats-it&quot;&gt;That’s It!&lt;/h1&gt;

&lt;p&gt;Once your installation is complete, check that it is working by visiting the IP address shown on a web browser.&lt;/p&gt;

&lt;p&gt;If a login screen greets you, then your ESXi installation has been successful. The username and password will be the same ones you set during installation.&lt;/p&gt;</content><author><name></name></author><summary type="html">If you are reading this blog, it’s likely you ran into the “No Network Adaptor” error whilst installing ESXi.</summary></entry><entry><title type="html">How to pass the Google Professional Cloud DevOps Engineer Exam</title><link href="https://blog.thanesh.io//How-to-pass-GCP-DevOps-Cert/" rel="alternate" type="text/html" title="How to pass the Google Professional Cloud DevOps Engineer Exam" /><published>2021-08-05T00:00:00+10:00</published><updated>2021-08-05T00:00:00+10:00</updated><id>https://blog.thanesh.io//How-to-pass-GCP-DevOps-Cert</id><content type="html" xml:base="https://blog.thanesh.io//How-to-pass-GCP-DevOps-Cert/">&lt;p&gt;A few weeks ago, I passed the Google Professional Cloud DevOps Engineer certification. The exam itself was pretty challenging, but fundamentally, I believe it is testing your ability to think like an SRE more than any tool or technology itself.&lt;/p&gt;

&lt;p&gt;In this blog, I will share the resources and techniques I used to prepare for this exam. This is by no means an exhaustive list, but I hope you will go away with a better understanding of what to focus on. Let’s get into it!&lt;/p&gt;

&lt;h1 id=&quot;1-class-sre-implements-devops-playlist&quot;&gt;1. class SRE implements DevOps playlist&lt;/h1&gt;

&lt;p&gt;Before you start studying, watch &lt;a href=&quot;https://www.youtube.com/playlist?list=PLIivdWyY5sqJrKl7D2u-gmis8h9K66qoj&quot;&gt;this playlist&lt;/a&gt; by Seth Vargo and Liz Fong-Jones. It is entertaining and will give you a broad understanding of how Google implements DevOps.&lt;/p&gt;

&lt;p&gt;In my opinion, understanding that SRE is an implementation of DevOps is essential to keep in mind whilst preparing for the exam. Once you comprehend this, it becomes far easier to learn the content.&lt;/p&gt;

&lt;h1 id=&quot;2-a-cloud-guru-training&quot;&gt;2. A Cloud Guru Training&lt;/h1&gt;

&lt;p&gt;Next, I recommend going through the A Cloud Guru GCP DevOps learning path. This course will build on the playlist from earlier and give you a much deeper understanding of DevOps concepts.&lt;/p&gt;

&lt;p&gt;I recommend doing all the hands-on labs they offer, as this will solidify your understanding of the services.&lt;/p&gt;

&lt;p&gt;There are five parts to this course, but I recommend focussing your energy on the first 4. Here are links to the four parts.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://acloudguru.com/course/google-professional-cloud-devops-engineer-certification-path-introduction-gcp-devops-engineer-track-part-1&quot;&gt;https://acloudguru.com/course/google-professional-cloud-devops-engineer-certification-path-introduction-gcp-devops-engineer-track-part-1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://acloudguru.com/course/google-cloud-devops-and-sres-gcp-devops-engineer-track-part-2&quot;&gt;https://acloudguru.com/course/google-cloud-devops-and-sres-gcp-devops-engineer-track-part-2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://acloudguru.com/course/google-cloud-ci-cd-pipelines-gcp-devops-engineer-track-part-3&quot;&gt;https://acloudguru.com/course/google-cloud-ci-cd-pipelines-gcp-devops-engineer-track-part-3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://acloudguru.com/course/monitoring-managing-and-maximizing-google-cloud-operations-gcp-devops-engineer-track-part-4&quot;&gt;https://acloudguru.com/course/monitoring-managing-and-maximizing-google-cloud-operations-gcp-devops-engineer-track-part-4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have completed all four parts, complete the practice exam several times until you’re consistently scoring 95%+. I will discuss practice exams in more detail further below.&lt;/p&gt;

&lt;h1 id=&quot;3-sre-book-by-google&quot;&gt;3. SRE Book by Google&lt;/h1&gt;

&lt;p&gt;The next thing I’d recommend is reading the Site Reliability Engineering book by Google. You don’t have to read the whole thing but use it as a reference whenever you are unsure of something during your study.&lt;/p&gt;

&lt;p&gt;For example, say something isn’t clear when you’re working through the training videos, open up this book and read that section. This book provides clear explanations of crucial SRE concepts that are bound to be on the exam.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://sre.google/sre-book/table-of-contents/&quot;&gt;https://sre.google/sre-book/table-of-contents/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I know many others have said this, but &lt;strong&gt;it really is very important you use this book in preparation for your exam.&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;4-sli-slo-and-sla&quot;&gt;4. SLI, SLO and SLA&lt;/h1&gt;

&lt;p&gt;Spend some time familiarising yourself with these terms. This is a crucial SRE concept that will almost certainly be on the exam.&lt;/p&gt;

&lt;p&gt;Personally, I found these terms tricky to understand, but this video explains them quite well. &lt;a href=&quot;https://www.youtube.com/watch?v=LKpIirL8f-I&quot;&gt;https://www.youtube.com/watch?v=LKpIirL8f-I&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Besides this video, read articles online and watch other youtube videos to cement your understanding further. I believe having a firm grasp on this is worth your time.&lt;/p&gt;

&lt;h1 id=&quot;5-logging-monitoring-and-observability&quot;&gt;5. Logging, Monitoring and Observability&lt;/h1&gt;

&lt;p&gt;This is a big part of SRE work, and I’ve heard it’s about 30% of the exam. I recommend going through this thoroughly as there’s quite a number of services that appear similar but do different things.&lt;/p&gt;

&lt;p&gt;To prepare for this, check out this Coursera course. You can sign up for the free 7-day trial if you don’t have a subscription.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.coursera.org/learn/logging-monitoring-observability-google-cloud?specialization=sre-devops-engineer-google-cloud&quot;&gt;https://www.coursera.org/learn/logging-monitoring-observability-google-cloud?specialization=sre-devops-engineer-google-cloud&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is worth going through all the labs they offer, as it will help you recall the goal of each service while doing the exam.&lt;/p&gt;

&lt;h1 id=&quot;6-read-the-exam-guide&quot;&gt;6. Read the Exam Guide&lt;/h1&gt;

&lt;p&gt;I’ve left this until the end as I’ve found nothing makes sense when you’re reading the study guide before learning the content.&lt;/p&gt;

&lt;p&gt;By this stage, you should be able to confidently read the guide and understand what the exam is looking for. If anything appears unclear, go back and familiarise yourself with that concept. You might even have to look beyond the resources listed above.&lt;/p&gt;

&lt;h1 id=&quot;7-practice-exams&quot;&gt;7. Practice Exams&lt;/h1&gt;

&lt;p&gt;Finally, do as many practice exams as you can get your hands on. Ultimately, this is the best way to gauge whether you are ready for the exam.&lt;/p&gt;

&lt;p&gt;If you identify an overarching weak point, take the time to familiarise yourself with this before doing more exams. For example, I noticed I was unfamiliar with Logging and Monitoring, so I went back, re-watched lectures and read the SRE book.&lt;/p&gt;

&lt;p&gt;Besides this, I would copy every question I got wrong in a Google Doc, write out the correct answer in my own words and include an explanation. I would then spend some time thinking about why the other answers were wrong.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I know there are many parts to focus on, but in my opinion, you will come out with a much better understanding of SRE/DevOps.&lt;/p&gt;

&lt;p&gt;If I had to sum up this blog, it would be:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Go through the theory&lt;/li&gt;
  &lt;li&gt;Get hands-on practice&lt;/li&gt;
  &lt;li&gt;Undertake practice exams&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ideally, try not to rush anything and give yourself plenty of time to understand the content. Personally, I spent about 3-weeks preparing but depending on your circumstance you may want more time.&lt;/p&gt;

&lt;p&gt;If you ever get stuck, ask the question - “why would an SRE do this?”&lt;/p&gt;

&lt;p&gt;At the end of the day, I felt the exam tests your ability to think like an SRE rather than the tools and technologies themselves.&lt;/p&gt;

&lt;p&gt;I hope this helped you, and if you have any questions, feel free to reach out!&lt;/p&gt;</content><author><name></name></author><summary type="html">A few weeks ago, I passed the Google Professional Cloud DevOps Engineer certification. The exam itself was pretty challenging, but fundamentally, I believe it is testing your ability to think like an SRE more than any tool or technology itself.</summary></entry><entry><title type="html">Simple Explained: Virtual Machines and Containers</title><link href="https://blog.thanesh.io//Containers-vs-VMs/" rel="alternate" type="text/html" title="Simple Explained: Virtual Machines and Containers" /><published>2021-07-29T00:00:00+10:00</published><updated>2021-07-29T00:00:00+10:00</updated><id>https://blog.thanesh.io//Containers-vs-VMs</id><content type="html" xml:base="https://blog.thanesh.io//Containers-vs-VMs/">&lt;p&gt;I’ve been learning about the cloud recently and keep coming across the term virtualization. At a high level, virtualization allows us to use a machine’s total capacity by distributing its resources among many environments. Essentially, virtualization aims to solve one fundamental problem; efficiency.&lt;/p&gt;

&lt;p&gt;In this blog, I’ll give you an overview of Virtual Machines (VMs) and Containers by outlining the problems they aim to solve.&lt;/p&gt;

&lt;h1 id=&quot;a-time-before-virtualization&quot;&gt;A time before virtualization&lt;/h1&gt;

&lt;p&gt;In the past, when a business wanted to host an application, it had to procure a physical server. The company would have to speculate the demand for the application upfront before making the purchase. As such, they were likely to buy a high-end server which costs a lot of money.&lt;/p&gt;

&lt;p&gt;Besides this, they would also incur monthly expenses like energy, workforce and licences. After spending all this money, they might realize that only a fraction of the capacity is being used. However, there was no way to allocate or make use of the resources that weren’t needed. This is where Virtual Machines come in.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;br /&gt;
&lt;img src=&quot;../images/containers_and_vms/server.png&quot; /&gt;
&lt;/p&gt;

&lt;h1 id=&quot;virtual-machines&quot;&gt;Virtual Machines&lt;/h1&gt;

&lt;p&gt;The industry realized that having one server per application was rigid, clunky and expensive. In the late 1990s, VMware came out with a product that would solve this issue.&lt;/p&gt;

&lt;p&gt;Virtualization, enabled by VMware, would allow organizations to squeeze more from their physical servers. Essentially, this technology virtualizes the physical server’s hardware enabling the emulation of multiple computers on a single device.&lt;/p&gt;

&lt;p&gt;For example, we can divide a server’s resources into 3 VMs and have a separate application running on each VM. Each VM is isolated from the other and has the resources necessary to perform its given task. This enabled better hardware utilization but created a lot of overhead due to the required OS installation.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;br /&gt;
&lt;img src=&quot;../images/containers_and_vms/vms.png&quot; /&gt;
&lt;/p&gt;

&lt;h1 id=&quot;containers&quot;&gt;Containers&lt;/h1&gt;

&lt;p&gt;Unlike a VM, a container does not require its own operating system. Containers virtualize the operating system, sharing the host kernel.&lt;/p&gt;

&lt;p&gt;Each container packages your application code and its dependencies together. The application thinks it is running on a dedicated OS and hardware, but in reality, it is sharing the from the host OS.&lt;/p&gt;

&lt;p&gt;However, compared to VMs, we are only managing one OS. No matter how many containers you have, there is only one host OS that needs to be addressed, i.e. reducing associated costs such as licences.&lt;/p&gt;

&lt;p&gt;A container is tiny compared to a VM and can boot up in far lesser time. It also provides portability as it is not dependent on the underlying OS.&lt;/p&gt;

&lt;p&gt;This means we can run code virtually anywhere with relative ease: multiple cloud providers, on-premise, local machines or even on VMs.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;br /&gt;
&lt;img src=&quot;../images/containers_and_vms/container.png&quot; width=&quot;400&quot; height=&quot;400&quot; /&gt;
&lt;/p&gt;

&lt;h1 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h1&gt;

&lt;p&gt;Both VMs and Containers continue to serve a purpose in today’s world. For example, when you request an instance on the cloud, you are accessing a virtual machine. The provider allocates some of their hardware for you to use, isolated from the rest of their users. You are then able to further leverage this instance by running containers on top of this.&lt;/p&gt;

&lt;p&gt;At the end of the day, choosing what’s best all depends on your circumstance. In some cases, you might even have to use a combination of both.&lt;/p&gt;

&lt;p&gt;I hope this blog has given you an insight into VMs and Containers. Here are some resources that have helped me to better understand these concepts:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;https://www.redhat.com/en/topics/virtualization/what-is-virtualization&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;&quot;&gt;https://www.capitalone.com/tech/cloud/containers-vs-vms/&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;&quot;&gt;https://devopscube.com/what-is-docker/&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">I’ve been learning about the cloud recently and keep coming across the term virtualization. At a high level, virtualization allows us to use a machine’s total capacity by distributing its resources among many environments. Essentially, virtualization aims to solve one fundamental problem; efficiency.</summary></entry><entry><title type="html">Quick Guide: How to add aliases in Z shell?</title><link href="https://blog.thanesh.io//Quick-Guide-Setting-Up-Alias-in-zsh/" rel="alternate" type="text/html" title="Quick Guide: How to add aliases in Z shell?" /><published>2021-07-27T00:00:00+10:00</published><updated>2021-07-27T00:00:00+10:00</updated><id>https://blog.thanesh.io//Quick-Guide-Setting-Up-Alias-in-zsh</id><content type="html" xml:base="https://blog.thanesh.io//Quick-Guide-Setting-Up-Alias-in-zsh/">&lt;p&gt;In this quick guide, I show you how to add aliases in Z shell. This is particularly useful when you want to shorten a command that you frequently use.&lt;/p&gt;

&lt;p&gt;For example, I set this up on my local machine so that I could easily SSH into my remote VMs. This means that I can type a single word in the terminal, instead of typing out the entire SSH command each time I want to log in remotely.&lt;/p&gt;

&lt;h1 id=&quot;step-0&quot;&gt;Step 0&lt;/h1&gt;

&lt;h2 id=&quot;open-up-your-terminal&quot;&gt;Open up your terminal&lt;/h2&gt;

&lt;h1 id=&quot;step-1&quot;&gt;Step 1&lt;/h1&gt;

&lt;h2 id=&quot;check-your-directory&quot;&gt;Check your directory&lt;/h2&gt;

&lt;p&gt;When you open up your terminal, you should automatically be in your home directory. Check this by using the command shown below. You should get an output similar to: &lt;strong&gt;/Users/{your username}&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;language-zsh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you are not in your home directory, you can use the following command to navigate there.&lt;/p&gt;

&lt;div class=&quot;language-zsh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;step-2&quot;&gt;Step 2&lt;/h1&gt;

&lt;h2 id=&quot;open-the-bash_profile-file-using-vim&quot;&gt;Open the .bash_profile file using vim&lt;/h2&gt;

&lt;p&gt;Once you’re in your home directory, open the .bash_profile file using the following command.&lt;/p&gt;

&lt;div class=&quot;language-zsh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vim .bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;step-3&quot;&gt;Step 3&lt;/h1&gt;

&lt;h2 id=&quot;add-your-alias-to-the-file&quot;&gt;Add your alias to the file&lt;/h2&gt;

&lt;p&gt;Press the ‘I’ key to insert into the file. Use the arrow keys to navigate to a new line where you will be adding your alias.&lt;/p&gt;

&lt;p&gt;Follow the syntax shown below to add your alias; replacing ${ALIAS_NAME} and ${COMMAND} with your choice.&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alias $&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;ALIAS_NAME&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;${COMMAND}&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;For example, in my case, I have added the command below to be able to easily access my Linux instance on GCP. Remember to insert your command inside the single quotation marks, as shown below.&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alias linux_ssh&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;gcloud beta compute ssh --zone &quot;australia-southeast2-a&quot; &quot;linux-playground&quot; --project &quot;rugged-future-316207&quot;&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once you have added your alias, ensure to save and exit by pressing the ESC key followed by ‘:wq’ and ENTER.&lt;/p&gt;

&lt;h1 id=&quot;step-4&quot;&gt;Step 4&lt;/h1&gt;

&lt;h2 id=&quot;check-that-the-alias-works&quot;&gt;Check that the alias works&lt;/h2&gt;

&lt;p&gt;For now, we’ll have to manually notify our machine to look in the .bash_profile file for our aliased command.&lt;/p&gt;
&lt;div class=&quot;language-zsh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; .bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Next, we can check our alias works by calling it with the same name we entered earlier. You can check your alias’ name by using the ‘alias’ command. Replace ${ALIAS_NAME} with your alias’ name.&lt;/p&gt;

&lt;div class=&quot;language-zsh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ALIAS_NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;step-5&quot;&gt;Step 5&lt;/h1&gt;

&lt;h2 id=&quot;add-bash_profile-to-the-zshrc-file&quot;&gt;Add .bash_profile to the .zshrc file&lt;/h2&gt;

&lt;p&gt;The shell commands contained in the .zhrc file is run every time Z shell is invoked. By adding the previous command to this file, we can tell Z shell to look in .bash_profile for our newly added alias. This means we don’t have to manually reference the .bash_profile file each time we want to use our alias.&lt;/p&gt;

&lt;p&gt;Open up the .zshrc file using the vim editor.&lt;/p&gt;

&lt;div class=&quot;language-zsh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vim .zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Whilst in this editor, press ‘I’ and use the arrow keys to navigate to a new line. Enter the following command and press ESC followed by ‘:wq’ and ENTER.&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;/&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;step-6&quot;&gt;Step 6&lt;/h1&gt;

&lt;h2 id=&quot;close-and-re-open-the-terminal&quot;&gt;Close and re-open the terminal&lt;/h2&gt;

&lt;p&gt;Exit out of the terminal and re-open it. Test your alias works without referencing the .bash_profile file manually.&lt;/p&gt;

&lt;h1 id=&quot;thats-it&quot;&gt;That’s It!&lt;/h1&gt;

&lt;p&gt;I hope this quick guide helped you to get a new alias set up. Keep in mind that you don’t have to use .bash_profile and can instead create a new file to house your aliases.&lt;/p&gt;

&lt;p&gt;If you have any questions, feel free to let me know!&lt;/p&gt;</content><author><name></name></author><summary type="html">In this quick guide, I show you how to add aliases in Z shell. This is particularly useful when you want to shorten a command that you frequently use.</summary></entry><entry><title type="html">How to setup Docker on a GCP VM instance?</title><link href="https://blog.thanesh.io//How-to-setup-Docker-on-GCP/" rel="alternate" type="text/html" title="How to setup Docker on a GCP VM instance?" /><published>2021-07-26T00:00:00+10:00</published><updated>2021-07-26T00:00:00+10:00</updated><id>https://blog.thanesh.io//How-to-setup-Docker-on-GCP</id><content type="html" xml:base="https://blog.thanesh.io//How-to-setup-Docker-on-GCP/">&lt;p&gt;Recently, I decided to learn about Docker and how it can be used to minimize the use of our infrastructure’s capacity. In a nutshell, Docker allows us to make better use of our hardware whilst ensuring our application runs on any OS.&lt;/p&gt;

&lt;p&gt;In this tutorial, I will walkthrough step-by-step on how you can get Docker setup on a GCP VM instance so that you can run your own containerized applications.&lt;/p&gt;

&lt;p&gt;Before you get started, this tutorial assumes you have some basic GCP knowledge, a Google Cloud account and an existing project already setup.&lt;/p&gt;

&lt;h1 id=&quot;step-0&quot;&gt;Step 0&lt;/h1&gt;

&lt;h2 id=&quot;log-onto-the-gcp-console-and-navigate-to-compute-engine&quot;&gt;Log onto the GCP console and navigate to Compute Engine&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;../images/docker_on_GCP/step-0-select-compute-engine.png&quot; alt=&quot;step-0-select-compute-engine&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;step-1&quot;&gt;Step 1&lt;/h1&gt;

&lt;h2 id=&quot;create-a-vm-instance&quot;&gt;Create a VM instance&lt;/h2&gt;

&lt;p&gt;Once you’ve navigated to Compute Engine, click on the ‘CREATE INSTANCE’ button on the top.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/docker_on_GCP/step-1-create-instance.png&quot; alt=&quot;step-1-create-instance&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here, we’ll be leaving most of the configurations as the default but changing the OS and adding an extra disk.&lt;/p&gt;

&lt;p&gt;Scroll down to ‘Boot disk’ and click on ‘Change’.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/docker_on_GCP/step-1-select-boot-disk.png&quot; alt=&quot;step-1-select-boot-disk&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select the following options: &lt;br /&gt;
&lt;strong&gt;Operating System:&lt;/strong&gt; Ubuntu &lt;br /&gt;
&lt;strong&gt;Version:&lt;/strong&gt; Ubuntu 20.04 LTS &lt;br /&gt;
&lt;strong&gt;Boot disk type:&lt;/strong&gt; Balanced persistent disk &lt;br /&gt;
&lt;strong&gt;Size (GB):&lt;/strong&gt; 10&lt;/p&gt;

&lt;p&gt;Next, scroll all the way to the bottom and select &lt;u&gt;&apos;Management, security, disks, networking, sole tenancy&apos;&lt;/u&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Optional:&lt;/strong&gt; You can enable HTTP and HTTPS traffic as shown below if you are planning to setup a web-server.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/docker_on_GCP/step-1-add-storage.png&quot; alt=&quot;step-1-add-storage&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click on the ‘Disks’ option and select ‘&lt;strong&gt;+&lt;/strong&gt; Add new disk’. You can keep most of the configurations as the default. The only thing I’d consider changing is the ‘&lt;strong&gt;Name&lt;/strong&gt;’ and ‘&lt;strong&gt;Size (GB)&lt;/strong&gt;’. I’ll be making my disk size 50 GB.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/docker_on_GCP/step-1-select-disk-option.png&quot; alt=&quot;step-1-select-disk-option&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you’re satisfied with your instance, click on the ‘Create’ button down the bottom. Give Google Cloud a few minutes to have your instance up and running. Wait for this to finish before moving on to the next step.&lt;/p&gt;

&lt;h1 id=&quot;step-2&quot;&gt;Step 2&lt;/h1&gt;

&lt;h2 id=&quot;ssh-into-the-instance&quot;&gt;SSH into the instance&lt;/h2&gt;

&lt;p&gt;Now that you have the instance running, it’s time to SSH into the instance and start setting up Docker.&lt;/p&gt;

&lt;p&gt;There’s a couple of ways to SSH into the instance. For this tutorial, I will use the browser option by clicking on the SSH button from the GCP console.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/docker_on_GCP/step-2-ssh.png&quot; alt=&quot;step-2-ssh&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;step-3&quot;&gt;Step 3&lt;/h1&gt;

&lt;h2 id=&quot;make-sure-you-have-no-versions-of-docker-installed&quot;&gt;Make sure you have no versions of Docker installed&lt;/h2&gt;

&lt;p&gt;Once you’ve SSH’d into the instance, we want to ensure that we have no versions of Docker installed.&lt;/p&gt;

&lt;p&gt;The command shown below will remove any versions of Docker you already have installed if there are any present. Copy/paste this command into your instance’s CLI.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get remove docker docker-engine docker.io containerd runc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;step-4&quot;&gt;Step 4&lt;/h1&gt;

&lt;h2 id=&quot;installing-docker&quot;&gt;Installing Docker&lt;/h2&gt;

&lt;p&gt;Now it’s time to install Docker. The first thing you’ll have to do is add Docker’s official GPG signing key. This is used to ensure that the package we are getting is valid.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; https://download.docker.com/linux/ubuntu/gpg | &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;gpg &lt;span class=&quot;nt&quot;&gt;--dearmor&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /usr/share/keyrings/docker-archive-keyring.gpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Next, add Docker’s official stable repository using the following command.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;lsb_release &lt;span class=&quot;nt&quot;&gt;-cs&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; stable&quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sudo tee&lt;/span&gt; /etc/apt/sources.list.d/docker.list &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now that we have the repository setup, we are ready to install Docker Engine. To do this, run the following 2 commands. The first command will refresh the apt cache, while the second will install Docker community edition on our instance.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;docker-ce docker-ce-cli containerd.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;step-5&quot;&gt;Step 5&lt;/h1&gt;

&lt;h2 id=&quot;check-if-docker-has-been-installed-correctly&quot;&gt;Check if Docker has been installed correctly&lt;/h2&gt;

&lt;p&gt;There are a few ways we can see if Docker has been installed correctly.&lt;/p&gt;

&lt;p&gt;The first thing we can do is run the following commands to check both the status and the version installed.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl status docker
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, login as the root user and give permission to the current user to be able to run docker commands. Replace ${USER} with your username.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/docker_on_GCP/step-5-login-root.png&quot; alt=&quot;step-5-login-root&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;usermod &lt;span class=&quot;nt&quot;&gt;-aG&lt;/span&gt; docker &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, log back in as the previous user and run your first container using the following commands.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/docker_on_GCP/step-5-run-hello-world.png&quot; alt=&quot;step-5-run-hello-world&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;su - &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run hello-world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At this point, you should see the “Hello from Docker!” message as shown below. If you don’t see this message, check that you have given permissions to the current user; otherwise, re-visit the previous steps and see if you’ve missed anything.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/docker_on_GCP/step-5-hello-world-message.png&quot; alt=&quot;step-5-hello-world-message&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;thats-it&quot;&gt;That’s It!&lt;/h1&gt;

&lt;p&gt;Well done! You should now have Docker setup on your VM instance and can start running containerized applications in the cloud.&lt;/p&gt;

&lt;p&gt;If you decide to run a web-server such as Apache/Nginx in a container, ensure you are checking all firewall rules. Otherwise, you will not see anything when attempting to connect via HTTP/HTTPS.&lt;/p&gt;

&lt;p&gt;I hope this walkthrough helped you. If you have any questions, feel free to let me know!&lt;/p&gt;</content><author><name></name></author><summary type="html">Recently, I decided to learn about Docker and how it can be used to minimize the use of our infrastructure’s capacity. In a nutshell, Docker allows us to make better use of our hardware whilst ensuring our application runs on any OS.</summary></entry><entry><title type="html">What to write about?</title><link href="https://blog.thanesh.io//What-to-write-about/" rel="alternate" type="text/html" title="What to write about?" /><published>2021-07-07T00:00:00+10:00</published><updated>2021-07-07T00:00:00+10:00</updated><id>https://blog.thanesh.io//What-to-write-about</id><content type="html" xml:base="https://blog.thanesh.io//What-to-write-about/">&lt;p&gt;Every student, upcoming developer and IT professional should have a blog where they can share their thoughts, knowledge and inspiration.&lt;/p&gt;

&lt;p&gt;Creating and maintaining a blog can improve your communication skills, help others and re-affirm what you’ve learnt.&lt;/p&gt;

&lt;p&gt;However, ‘what to write about?’ can often be the hardest part. So I posed this question to the &lt;a href=&quot;https://devcop.io/&quot;&gt;Dev(){CoP}&lt;/a&gt; community and here is what they had to say.&lt;/p&gt;

&lt;h2 id=&quot;pick-a-theme&quot;&gt;Pick a theme&lt;/h2&gt;

&lt;p&gt;Before you begin, pick a theme or get a broad sense of what you want to write about. Understanding this will make coming up with ideas far easier as you’ll be focussed on one specific area.&lt;/p&gt;

&lt;p&gt;For example, if you want to be known as a web developer specialising in frontend, you might base your blogs around HTML, CSS and ReactJS.&lt;/p&gt;

&lt;p&gt;Once you have your theme in mind, you can start to build your blog around this.&lt;/p&gt;

&lt;h2 id=&quot;problems-that-youve-solved&quot;&gt;Problems that you’ve solved&lt;/h2&gt;

&lt;p&gt;Being in any IT role is about facing and solving problems.&lt;/p&gt;

&lt;p&gt;By writing about the problems you have solved, you can re-affirm what you’ve learnt and possibly help someone else out in the process.&lt;/p&gt;

&lt;p&gt;Besides this, it also acts as a reference in the event you encounter the problem again.&lt;/p&gt;

&lt;h2 id=&quot;online-courses&quot;&gt;Online courses&lt;/h2&gt;

&lt;p&gt;Since IT is an ever-growing field, there’s always something more to be learnt.&lt;/p&gt;

&lt;p&gt;As you go through an online course, perhaps you can document your learnings or note down some key takeaways from the program.&lt;/p&gt;

&lt;p&gt;Doing this can act as referesher but it may also help someone else who is deciding whether to enrol in the course.&lt;/p&gt;

&lt;h2 id=&quot;things-that-annoy-you&quot;&gt;Things that annoy you&lt;/h2&gt;

&lt;p&gt;As you go along your IT journey, there are bound to be things that annoy you.&lt;/p&gt;

&lt;p&gt;For example, say you’ve been working on a project and you’ve been deploying code manually. But then you realise how tedious this can be, leading you to automate this process.&lt;/p&gt;

&lt;p&gt;From this, you can write about all your frustrations, including a walkthrough of your solution; in turn someone else may be able to avoid the same hassles.&lt;/p&gt;

&lt;h2 id=&quot;open-source-projects&quot;&gt;Open Source Projects&lt;/h2&gt;

&lt;p&gt;Open Source Projects are a great way to get invovled, give back and gain practical experience.&lt;/p&gt;

&lt;p&gt;You can keep track of your experience by documenting what you’ve been working on, including any roadblocks that you encounter.&lt;/p&gt;

&lt;p&gt;This is an excellent way to measure your progress and further cement your knowledge.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Essentially, writing blogs is a means of documenting your learnings and sharing what you know.&lt;/p&gt;

&lt;p&gt;The easiest way to come up with ideas is to keep your blog focussed and simply write about what you’ve been working on.&lt;/p&gt;

&lt;p&gt;I would like to thank the &lt;a href=&quot;https://devcop.io/&quot;&gt;Dev(){CoP}&lt;/a&gt; community for helping me come up with this list. If you have any further ideas or would like to have a discussion about this blog, please feel free to reach out!&lt;/p&gt;</content><author><name></name></author><summary type="html">Every student, upcoming developer and IT professional should have a blog where they can share their thoughts, knowledge and inspiration.</summary></entry><entry><title type="html">Deploying Your Jekyll Site on AWS</title><link href="https://blog.thanesh.io//Deploying-Your-Jekyll-Site-On-AWS/" rel="alternate" type="text/html" title="Deploying Your Jekyll Site on AWS" /><published>2021-02-16T00:00:00+11:00</published><updated>2021-02-16T00:00:00+11:00</updated><id>https://blog.thanesh.io//Deploying-Your-Jekyll-Site-On-AWS</id><content type="html" xml:base="https://blog.thanesh.io//Deploying-Your-Jekyll-Site-On-AWS/">&lt;p&gt;When I was looking to deploy my blog on AWS, I remember searching everywhere for an all-in-one tutorial that covered everything from deployment to domain configuration. However, I couldn’t find one to suit exactly what I needed.&lt;/p&gt;

&lt;p&gt;After browsing several articles combined with trial and error, I’ve compiled a set of steps that worked for me.&lt;/p&gt;

&lt;p&gt;In this tutorial, I will show you how to deploy your Jekyll site (or any other static site) on AWS using S3, CloudFront and Route53. Before you get started, this tutorial assumes you already have an AWS account, a Jekyll site and a purchased domain.&lt;/p&gt;

&lt;h1 id=&quot;step-1&quot;&gt;Step 1&lt;/h1&gt;

&lt;h2 id=&quot;creating-an-s3-bucket&quot;&gt;Creating an S3 Bucket&lt;/h2&gt;

&lt;p&gt;The first thing you need to do is head into the AWS console, sign-in and click into S3. You should see a page like below, minus the buckets.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/jekyll_on_AWS/s3-page.png&quot; alt=&quot;step-1-s3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click on ‘Create bucket’ in the top right hand corner and name your bucket the same as your chosen domain, making sure to choose the region closest to you. Under ‘Block Public Access settings for bucket’, untick the first checkbox to make this bucket public. Your screen should be similar to below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/jekyll_on_AWS/s3-create.png&quot; alt=&quot;step-1-s3-create&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Leave the rest of the settings as default and click ‘Create Bucket’.&lt;/p&gt;

&lt;h1 id=&quot;step-2&quot;&gt;Step 2&lt;/h1&gt;

&lt;h2 id=&quot;changing-the-bucket-policy&quot;&gt;Changing the Bucket Policy&lt;/h2&gt;

&lt;p&gt;Once you’ve created the S3 Bucket, you’ll need to change the bucket policy to provide access to the objects stored in your bucket.&lt;/p&gt;

&lt;p&gt;Navigate to your bucket and click on the ‘Permissions’ tab. Scroll down to ‘Bucket Policy’ and click edit. Copy &amp;amp; paste the json code shown below; replacing ‘blog.thanesh.io’ with your bucket name.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2012-10-17&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Statement&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Sid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AddPerm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Allow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Principal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;s3:GetObject&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arn:aws:s3:::blog.thanesh.io/*&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;step-3&quot;&gt;Step 3&lt;/h1&gt;

&lt;h2 id=&quot;enable-static-hosting&quot;&gt;Enable Static Hosting&lt;/h2&gt;

&lt;p&gt;Next, head into the ‘Properties’ tab and scroll down until you find ‘Static website hosting’. Click the ‘Edit’ button on the top right hand corner and you should be directed to a settings page like below.&lt;/p&gt;

&lt;p&gt;On here, we will enable static website hosting and specify the index document. You don’t have to change any other settings.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/jekyll_on_AWS/s3-static-hosting.png&quot; alt=&quot;s3-static-hosting&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;step-4&quot;&gt;Step 4&lt;/h1&gt;

&lt;h2 id=&quot;deploying-your-website&quot;&gt;Deploying Your Website&lt;/h2&gt;

&lt;p&gt;In this step, we’ll be deploying our site by adding it’s files into the AWS bucket we created earlier. Just before we do that, however, we have to prepare out Jekyll files to ensure it will deploy correctly on S3.&lt;/p&gt;

&lt;p&gt;Open up your website’s repository in your favourite IDE and locate the _config.yml file. In here, change the url to your domain name and the baseurl to an empty string.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/jekyll_on_AWS/config-yml.png&quot; alt=&quot;config-yml&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After you’ve changed this, open up your terminal and navigate to the folder of your Jekyll site using the CD command shown below.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;Desktop/jekyll-site
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Once you’ve done this, type in the following command to create a production build of your site.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If this has run successfully, you will now see a new folder in your repository called ‘_site’. Upload the contents of this folder into your S3 bucket by drag and drop or through the ‘Upload’ function on AWS.&lt;/p&gt;

&lt;p&gt;At this point, your site is live. Head into the properties tab, scroll to the bottom and click on the link shown in the ‘Static Website Hosting’ box. If everything has gone well, you should now see your site.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/jekyll_on_AWS/live-link.png&quot; alt=&quot;live-link&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I suggest copying this url now as we will need it for the next step.&lt;/p&gt;

&lt;h1 id=&quot;step-5&quot;&gt;Step 5&lt;/h1&gt;

&lt;h2 id=&quot;enabling-cloudfront&quot;&gt;Enabling CloudFront&lt;/h2&gt;

&lt;p&gt;Now it’s time to set up CloudFront for your website. Essentially, CloudFront distributes your site across AWS edge locations, providing better performance to the end-user.&lt;/p&gt;

&lt;p&gt;To get started with setting this up, head into the CloudFront service and click on ‘Create Distribution’.&lt;/p&gt;

&lt;p&gt;Under ‘Origin Domain Name’, enter the url you copied earlier, minus the protocol. For example, the link generated for my bucket is http://blog.thanesh.io.s3-website-ap-southeast-2.amazonaws.com. Therefore, the value I’ll enter into this field is blog.thanesh.io.s3-website-ap-southeast-2.amazonaws.com.&lt;/p&gt;

&lt;p&gt;It is important you do not select from one of the options given in the drop down, otherwise, this will not work. You’ll have to copy and paste the url as I’ve described above.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/jekyll_on_AWS/create-distribution.png&quot; alt=&quot;create-distribution&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can keep most of the settings as their default. However, under ‘Alternate Domain Names’, you’ll want to enter your registered domain name. Next, scroll to the bottom and hit “Create Distribution’. This could take about 10-15 minutes to be deployed.&lt;/p&gt;

&lt;h1 id=&quot;step-6&quot;&gt;Step 6&lt;/h1&gt;

&lt;h2 id=&quot;linking-up-your-domain&quot;&gt;Linking up your Domain&lt;/h2&gt;

&lt;p&gt;By this stage, you should have your website deployed and set up with CloudFront. In this final part, we’ll work through setting up your domain so that people know how to access your site.&lt;/p&gt;

&lt;p&gt;Firstly, head into Route53, click on ‘Hosted Zones’ from the left hand column and then create a hosted zone by entering your chosen domain.&lt;/p&gt;

&lt;p&gt;Once you’ve created this, you should see a NS record appear. Copy each of the values from this field and enter it into your domain provider. Essentially, this will allow Route53 to handle the configuration of the domain.&lt;/p&gt;

&lt;p&gt;Next, while in your hosted zone, click on ‘Create Record’. Here we want to connect our domain with our CloudFront distribution we created earlier. Make sure it is an ‘A record’ and click on the ‘Alias’ switch in the right hand corner. In the dropdown that appears, select ‘Alias to CloudFront distribution’ which prefills the region to ‘US East (N. Virginia). Click into the search box and select the CloudFront distribution we made from before.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/jekyll_on_AWS/record.png&quot; alt=&quot;record&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hit ‘Create Record’ and you’re all set! Be patient as it may take a couple of hours to set in.&lt;/p&gt;

&lt;h1 id=&quot;step-7&quot;&gt;Step 7&lt;/h1&gt;

&lt;h2 id=&quot;redirection-for-www-and-ssl&quot;&gt;Redirection for WWW and SSL&lt;/h2&gt;

&lt;p&gt;At this point your site should be up and live. However, if you type in www. before your domain, it will produce an error.&lt;/p&gt;

&lt;p&gt;Fixing this is similar to the process we’ve just done, with a few minor adjustments. You’ll want to go back and follow the steps from before but when creating another bucket, you’ll want to prepend it with ‘www’ and under ‘Static Website Hosting’, choose the ‘Redirect’ option - setting it your domain. In this bucket, you don’t have to add any files as it is purely for redirection.&lt;/p&gt;

&lt;p&gt;After this, setup another CloudFront distribution linking to your ‘www’ bucket. Add another ‘A record’ in your hosted zone and set the Alias Target to your new CloudFront url.&lt;/p&gt;

&lt;p&gt;As a final note, if you want to setup SSL, go back into the CloudFront distributions you created earlier and find the SSL Certificate option. Under here, choose the ‘Custom SSL Certificate’ option and click on ‘Request or Import a Certificate with ACM’. This is fairly straightforward, especially if your domain is already setup in Route53.&lt;/p&gt;

&lt;h1 id=&quot;thats-it&quot;&gt;That’s It!&lt;/h1&gt;

&lt;p&gt;Well Done! Your site is up and live, I hoped this helped you. I’m sure there’s other ways to publish a Jekyll site but this is what worked for me. If you have any questions or are facing any problems, please do not hesitate to reach out to me - I am always happy to help!&lt;/p&gt;</content><author><name></name></author><summary type="html">When I was looking to deploy my blog on AWS, I remember searching everywhere for an all-in-one tutorial that covered everything from deployment to domain configuration. However, I couldn’t find one to suit exactly what I needed.</summary></entry><entry><title type="html">Setting up AWS LocalStack</title><link href="https://blog.thanesh.io//Setting-Up-Localstack-on-your-machine/" rel="alternate" type="text/html" title="Setting up AWS LocalStack" /><published>2021-02-02T00:00:00+11:00</published><updated>2021-02-02T00:00:00+11:00</updated><id>https://blog.thanesh.io//Setting-Up-Localstack-on-your-machine</id><content type="html" xml:base="https://blog.thanesh.io//Setting-Up-Localstack-on-your-machine/">&lt;p&gt;LocalStack is an extremely useful tool if you want to save money and avoid signing into AWS console as much as possible.&lt;/p&gt;

&lt;p&gt;Using LocalStack gives you the ability to spin up cloud services directly on your local machine, making it more convenient to develop for the cloud.&lt;/p&gt;

&lt;p&gt;I recently discovered LocalStack whilst working on the &lt;a href=&quot;https://github.com/zainafzal88/scrumblr-enhancement&quot;&gt;Scrumblr-Enhacement project&lt;/a&gt; alongside a group of members from the Dev(){CoP} community. Zain Afzal, our project lead, recommended we use LocalStack in order to simplify development and save cost.&lt;/p&gt;

&lt;p&gt;In this blog, I will show you how to setup LocalStack on your machine, step-by-step.&lt;/p&gt;

&lt;h1 id=&quot;step-1&quot;&gt;Step 1&lt;/h1&gt;

&lt;h2 id=&quot;install-and-run-docker&quot;&gt;Install and Run Docker&lt;/h2&gt;

&lt;p&gt;Visit &lt;a href=&quot;&quot;&gt;https://hub.docker.com/search?q=&amp;amp;type=edition&amp;amp;offering=community&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Search for the Docker download matching your OS and install it accordingly.&lt;/p&gt;

&lt;p&gt;Once you have Docker installed, make sure to run the application. If you’ve installed and run it correctly, you should see the whale icon appear on your tool bar above.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/step-1-localstack.png&quot; alt=&quot;step-1-localstack&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All you have to do is keep it running and proceed to the next step.&lt;/p&gt;

&lt;h1 id=&quot;step-2&quot;&gt;Step 2&lt;/h1&gt;

&lt;p&gt;Visit the LocalStack repository on github via
https://github.com/localstack/localstack.&lt;/p&gt;

&lt;p&gt;On here, locate a file called ‘docker-compose.yaml’ and click to open it. You should see a page like below. Highlight all the text shown in this file and copy it to your clipboard.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/step-2-localstack.png&quot; alt=&quot;step-2-localstack&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;step-3&quot;&gt;Step 3&lt;/h1&gt;

&lt;p&gt;If you already know what project you’ll be using LocalStack for, open up that repository on your favourite IDE. Otherwise, create a test folder anywhere on your machine and open that instead.&lt;/p&gt;

&lt;p&gt;For this tutorial, I will create a folder called ‘localstack’ on my desktop.&lt;/p&gt;

&lt;p&gt;Once you have opened up your IDE with your chosen folder, create a new file in there called ‘docker-composer.yaml’&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/step-3-localstack.png&quot; alt=&quot;step-3-localstack&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After you’ve created this file, paste the text you copied earlier and hit save.&lt;/p&gt;

&lt;h1 id=&quot;step-4&quot;&gt;Step 4&lt;/h1&gt;

&lt;p&gt;Now add the AWS services you plan to use by editing the ‘SERVICES’ line in the ‘docker-compose.yaml’ file. As you can see from the image below, I have added s3, lambda and ec2.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/step-4-localstack.png&quot; alt=&quot;step-4-localstack&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;step-5&quot;&gt;Step 5&lt;/h1&gt;

&lt;p&gt;Open up the terminal; either through your IDE or directly on your machine. Locate the directory where you have your ‘docker-compose.yaml’ file stored. You can do this by using the CD command as shown below.&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;Desktop/localstack
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once you’ve done this, type in the following command.&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You should see a sequence of lines show up in your terminal just like the image shown below. As you can see, the mock services we listed earlier is now running.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/step-5-localstack.png&quot; alt=&quot;step-5-localstack&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;step-6&quot;&gt;Step 6&lt;/h1&gt;
&lt;p&gt;Visit &lt;a href=&quot;&quot;&gt;https://0.0.0.0:4566&lt;/a&gt; in your browser and you should see a “running” status like below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/step-6-localstack.png&quot; alt=&quot;step-6-localstack&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Add /health to the end of the previous url and you will see the statuses of each of the services you listed earlier.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/step-6(2)-localstack.png&quot; alt=&quot;step-6(2)-localstack&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;thats-it&quot;&gt;That’s It!&lt;/h1&gt;

&lt;p&gt;You should be all set up and ready to start developing for AWS on your local machine! Hope this helped. If you have any questions or are facing any problems, please do not hesitate to reach out to me.&lt;/p&gt;</content><author><name></name></author><summary type="html">LocalStack is an extremely useful tool if you want to save money and avoid signing into AWS console as much as possible.</summary></entry></feed>